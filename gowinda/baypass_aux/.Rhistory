pops[[subsp]]=pops[[subsp]][!(pops[[subsp]] %in% c('chr', 'pos'))]
pops[[subsp]]=unique(gsub("\\.aac$|\\.dac$", "", pops[[subsp]]))
pops[[subsp]]=gsub("_", ".", pops[[subsp]])
pops[[subsp]]=pops[[subsp]][order(pops[[subsp]])]
# Covariance matrices
for(seed in c('', '_seed.100', '_seed.10k')){
if(seed==''){seed_name='focal'}
if(seed=='_seed.100'){seed_name='100'}
if(seed=='_seed.10k'){seed_name='10k'}
omega[['exome']][[subsp]][[seed_name]]=as.matrix(fread(paste0("../../../../myriad/phase1and2_exome_output/baypass_output/mapped.on.target/ac/f5",
subsp.file, ".pops_minInd.6or50pct_missing.pops.0_minMAC2/core/f5",
subsp.file, ".pops_missing.pops.0_minMAC2",seed,"_mat_omega.out")))
colnames(omega[['exome']][[subsp]][[seed_name]])=pops[[subsp]]
rownames(omega[['exome']][[subsp]][[seed_name]])=pops[[subsp]]
omega[['chr21']][[subsp]][[seed_name]]=as.matrix(fread(paste0("../../../../myriad/phase1and2_chr21_output/baypass_output/ac/chr21.f7",
subsp.file, ".pops_minInd.6or50pct_missing.pops.0_minMAC2.non-genic_1000bp.flanks/core/chr21.f7",
subsp.file, ".pops_missing.pops.0_minMAC2.non-genic_1000bp.flanks",seed,"_mat_omega.out")))
colnames(omega[['chr21']][[subsp]][[seed_name]])=pops[[subsp]]
rownames(omega[['chr21']][[subsp]][[seed_name]])=pops[[subsp]]
}
# XtX output
## Annotated file
ann[['exome']][[subsp]]=unique(fread(paste0("baypass_core/baypass_core_inference/output/formatted_baypass_core_output/f5",
subsp.file, ".pops_missing.pops.", miss.pop,"_minMAC2_summary_pi_xtx.out_row.per.gtf.annot_5000bp.flanks"),
header = T, select=c("chr", "pos", "gene", "MRK")))
ann[['exome']][[subsp]][ann[['exome']][[subsp]]$gene=='.','gene']=NA
## Exome with FPR data
xtx[['exome']][[subsp]]=fread(paste0("baypass_core/baypass_core_inference/output/baypass_core_output_with_fprs/f5",
subsp.file ,".pops_missing.pops.", miss.pop,"_minMAC2_summary_pi_xtx.fpr.non-genic_1000bp.flanks"))
xtx[['exome']][[subsp]]=merge(xtx[['exome']][[subsp]], ann[['exome']][[subsp]], by=c('chr', 'pos'), all.x=TRUE)
xtx[['exome']][[subsp]]$chr_pos=paste(xtx[['exome']][[subsp]]$chr, xtx[['exome']][[subsp]]$pos, sep="_")
## Chr21
xtx[['chr21']][[subsp]]=fread(paste0("baypass_core/baypass_core_inference/output/formatted_baypass_core_output/chr21.f7",
subsp.file, ".pops_missing.pops.", miss.pop, "_minMAC2.non-genic_1000bp.flanks_summary_pi_xtx_formatted"))
xtx[['chr21']][[subsp]]$chr_pos=paste(xtx[['chr21']][[subsp]]$chr, xtx[['chr21']][[subsp]]$pos, sep="_")
## Pi prior parameters
seed_suffixs=c("", "_seed.100", "_seed.10k")
for(run in 1:3){
pi_para[['exome']][[subsp]][[run]]=fread(paste0("../../../../myriad/phase1and2_exome_output/baypass_output/mapped.on.target/ac/f5",
subsp.file, ".pops_minInd.6or50pct_missing.pops.", miss.pop, "_minMAC2/core/f5",
subsp.file, ".pops_missing.pops.", miss.pop, "_minMAC2", seed_suffixs[run], "_summary_beta_params.out"))
pi_para[['chr21']][[subsp]][[run]]=fread(paste0("../../../../myriad/phase1and2_chr21_output/baypass_output/ac/chr21.f7",
subsp.file, ".pops_minInd.6or50pct_missing.pops.", miss.pop, "_minMAC2.non-genic_1000bp.flanks/core/chr21.f7",
subsp.file, ".pops_missing.pops.", miss.pop, "_minMAC2.non-genic_1000bp.flanks", seed_suffixs[run], "_summary_beta_params.out"))
}
## Allele frequencies
allele.freq[[subsp]]=fread(paste0("baypass_core/baypass_core_inference/output/formatted_baypass_core_output/f5", subsp.file,
".pops_missing.pops.", miss.pop,"_minMAC2_summary_pij.out_pop.info"))
allele.freq[[subsp]]$chr_pos=paste(allele.freq[[subsp]]$chr, allele.freq[[subsp]]$pos, sep="_")
#### Population colours (according to subspecies)
subsp.col[[subsp]]=c()
for(pop in pops[[subsp]]){
if(startsWith(pop, "c.")){subsp.col[[subsp]]=c(subsp.col[[subsp]], "green3")}
if(startsWith(pop, "e.")){subsp.col[[subsp]]=c(subsp.col[[subsp]], "darkorange")}
if(startsWith(pop, "n.")){subsp.col[[subsp]]=c(subsp.col[[subsp]], "red")}
if(startsWith(pop, "w.")){subsp.col[[subsp]]=c(subsp.col[[subsp]], "blue")}
}
# AUX output
if(subsp!='n'){
## Exome with FPR data
betai[['exome']][[subsp]]=unique(fread(paste0("baypass_aux/output/baypass_aux_output_with_fprs/f5", subsp.file ,".pops_missing.pops.", miss.pop,"_minMAC2_",
env_data, "_summary_betai.out_all_runs.fpr.non-genic_1000bp.flanks")))
betai[['exome']][[subsp]]=merge(betai[['exome']][[subsp]], ann[['exome']][[subsp]], by=c('chr', 'pos'), all.x=TRUE)
betai[['exome']][[subsp]]$log_fpr=-log(betai[['exome']][[subsp]]$fpr)
betai[['exome']][[subsp]]$chr_pos=paste(betai[['exome']][[subsp]]$chr, betai[['exome']][[subsp]]$pos, sep="_")
## chr21
betai[['chr21']][[subsp]]=fread(paste0("baypass_aux/output/formatted_baypass_aux_output/chr21.f7",
subsp.file ,".pops_missing.pops.", miss.pop,"_minMAC2.non-genic_1000bp.flanks",omega_run,"_", env_data, "_summary_betai.out_all_runs.gz"))
betai[['chr21']][[subsp]]$chr_pos=paste(betai[['chr21']][[subsp]]$chr, betai[['chr21']][[subsp]]$pos, sep="_")
## Cov file
cov.in[[subsp]][['Real']]=fread(paste0("baypass_aux/output/formatted_baypass_aux_output/f5",
subsp.file ,".pops_missing.pops.", miss.pop,"_minMAC2_", env_data, "_covariate.std"))
covs=unique(betai[['exome']][[subsp]]$COVARIABLE_name)
### Add covariable names as row names (alphabetical order)
#names(habitat_col)=covs[order(covs)]
rownames(cov.in[[subsp]][['Real']])=covs[order(covs)]
### Add population names as column names (alphabetical order)
colnames(cov.in[[subsp]][['Real']])=pops[[subsp]]
}
}
# Unfiltered metadata
meta.data.exome=read_excel("../sample_filtering/meta.data/Metadata_exome_PanAf.xlsx", sheet="Sheet1")
meta.data.exome$Community=meta.data.exome$Site
meta.data.exome$Community=gsub( "[[:punct:]]", "", as.character(meta.data.exome$Community))
meta.data.exome$Community<-gsub( " ", "", as.character(meta.data.exome$Community))
# Filtered metadata (and assigned to populations)
f5.exome.pops=fread("../population_structure/output/f5.metadata.with.populations.csv")
# Environmnetal data
env.pop.og=read.csv("../../environmental_data/output/meta_data.env.pops.imputed.csv")
env.pop=read.csv("../../environmental_data/output/meta_data.env.pops.imputed.csv")
env.pop$Subspecies=NA
env.pop[grepl("^c\\.", env.pop$Population), "Subspecies"]="Central"
env.pop[grepl("^e\\.", env.pop$Population), "Subspecies"]="Eastern"
env.pop[grepl("^n\\.", env.pop$Population), "Subspecies"]="Nigeria-Cameroon"
env.pop[grepl("^w\\.", env.pop$Population), "Subspecies"]="Western"
# Genome annotation
gtf=read.table("../gowinda/baypass_core/output/gowinda_input/annotation_files/Homo_sapiens.GRCh37.87.chr_gene.symbol_sync_homologs.gtf")
# Chimp ranges
chimp.ranges=readOGR("~/OneDrive - University College London/Projects/PanAf/maps/chimp_ranges/chimp_ranges.shp")
# Format names function
format_names=function(df){
# Populations
if('Population' %in% colnames(df)){
df$Population=gsub("^.\\.", "", df$Population)
df[df$Population=="Comoe", "Population"]="Comoé"
df[df$Population=="Tai", "Population"]="Taï"
df[df$Population=="KorupMtCameroon", "Population"]="Korup-Mt. Cameroon"
df[df$Population=="BakounSobory", "Population"]="Bakoun-Sobory"
df[df$Population=="Rubi-Tele", "Population"]="Rubi-Télé"
df[df$Population=="Lope", "Population"]="Lopé"
df[df$Population=="Bateke", "Population"]="Batéké"
df[df$Population=="MtsdeCristal", "Population"]="Monts de Cristal"
df[df$Population=="MtSangbe", "Population"]="Mt. Sangbé"
df[df$Population=="EastNimba", "Population"]="East Nimba"
}
# Communites (FOR MAPPING SO FOR EXAMPLE THE TWO TAI COMMUNITIES ARE LABELLED 'Taïx2')
if('Community' %in% colnames(df)){
df$Community=gsub("_", " ", df$Community)
df[df$Community=="Zoo Ankasa", "Community"]="Ankasa (zoo chimp)"
df[grepl("^Comoe", df$Community), "Community"]="Comoé×5"
df[grepl("^Tai", df$Community), "Community"]="Taï×2"
df[df$Community=="Rubi-Tele", "Community"]="Rubi-Télé"
df[df$Community=="Lope", "Community"]="Lopé"
df[df$Community=="Bateke", "Community"]="Batéké"
df[df$Community=="MtsdeCristal", "Community"]="Monts de Cristal"
df[df$Community=="MtSangbe", "Community"]="Mt. Sangbé"
df[df$Community=="EastNimba", "Community"]="East Nimba"
}
if(!('Population' %in% colnames(df) | 'Community' %in% colnames(df))){
stop("Input does not have 'Population' or 'Community' column")
}
return(df)
}
env.pop=format_names(env.pop)
f5.exome.pops=format_names(f5.exome.pops)
mal=fread("../gowinda/baypass_core/output/gowinda_input/association_files/pathogen_association.gene.set_and.all.txt", header = FALSE)
mal=unique(unlist(str_split(mal[mal$V2 %in% c('Malaria (Daub et al., 2013)', 'Malaria (erythrocyte genes) (Ebel et al., 2021)'), 'V3'], pattern=" ")))
suffix=paste0(".non-genic_1000bp.flanks")
for(subsp in subsps){
if(subsp=='all'){subsp.file=''}else{subsp.file=paste0(".", subsp)}
if(subsp=='n'){miss.pop=0}else{miss.pop=0.3}
# Remove GYPA SNPs
betai.tmp=betai[['exome']][[subsp]][!(betai[['exome']][[subsp]]$chr_pos %in% c('4_145039806', '4_145040845')) |
!(betai[['exome']][[subsp]]$gene %in% c('GYPA', 'GYPB')),]
# Write FPR data
for(fpr in fprs){
# Write Gowinda input files
for(cov in unique(betai.tmp$COVARIABLE_name)){
## Both
write.table(unique(betai.tmp[betai.tmp$COVARIABLE_name==cov & betai.tmp$fpr<fpr, c("chr", "pos")]),
paste0("../gowinda/baypass_aux/output/gowinda_input/snp_files/", env_data,"/",subsp,".", env_data,"-",cov,".fpr",100*fpr, "pct" ,suffix, ".rmGYPA"),
col.names=F, row.names=F, sep="\t")
## Positive beta
write.table(unique(betai.tmp[betai.tmp$COVARIABLE_name==cov & betai.tmp$fpr<fpr & betai.tmp$M_Beta.median>0, c("chr", "pos")]),
paste0("../gowinda/baypass_aux/output/gowinda_input/snp_files/", env_data,"/",subsp,".", env_data,"-",cov,".fpr",100*fpr, "pct" ,suffix, ".pos_beta.rmGYPA"),
col.names=F, row.names=F, sep="\t")
## Negative beta
write.table(unique(betai.tmp[betai.tmp$COVARIABLE_name==cov & betai.tmp$fpr<fpr & betai.tmp$M_Beta.median<0, c("chr", "pos")]),
paste0("../gowinda/baypass_aux/output/gowinda_input/snp_files/", env_data,"/",subsp,".", env_data,"-",cov,".fpr",100*fpr, "pct" ,suffix, ".neg_beta.rmGYPA"),
col.names=F, row.names=F, sep="\t")
}
}
}
source("../gowinda/baypass_core/scripts/plot_gowinda.R")
tails_suffixs=c(".pos_beta.rmGYPA", ".neg_beta.rmGYPA")
tails=c("fpr0.5pct.non-genic_1000bp.flanks", "fpr0.1pct.non-genic_1000bp.flanks", "fpr0.05pct.non-genic_1000bp.flanks")
plot_gowinda_all=function(subsps, env_data, covs, tails, gene.set){
for(subsp in subsps){
cat("-", subsp, "\n")
for(cov in covs){
for(tail_suffix in tails_suffixs){
cat("--", tail_suffix, "\n")
for(tail in paste0(tails, tail_suffix)){
gowinda_output_file=paste0("../gowinda/baypass_aux/output/gowinda_output/",env_data,"/",subsp,".",env_data,"-",cov,".",tail,".gowinda_out.", gene.set)
#cat(gowinda_output_file)
if(file.exists(gowinda_output_file) & file.size(gowinda_output_file) > 0){
df=fread(gowinda_output_file)
if(nrow(df>0)){plot_gowinda(df, title=paste0(subsp,": ",env_data, ": ", cov, "\n", tail, " candidates"))}
}
}
}
}
}
}
plot_gowinda_all(subsps=subsps,
env_data=env_data,
covs=covs,
tails=tails,
gene.set='pathogen_ebel2017')
path.gtf=fread("../gowinda/baypass_core/output/gowinda_input/annotation_files/Homo_sapiens.GRCh37.87.chr_gene.symbol_sync_homologs_pathogen_ebel2017.gtf")
write.table(path.gtf[!(path.gtf$V9 %in% c('gene_id "HBB";', 'gene_id "GYPB";')),],
"../gowinda/baypass_core/output/gowinda_input/annotation_files/Homo_sapiens.GRCh37.87.chr_gene.symbol_sync_homologs_pathogen_ebel2017_rm_HBB_GYPB_TEST.gtf",
sep ="\t", row.names=FALSE, col.names=FALSE, quote=FALSE)
write.table(path.gtf[!(path.gtf$V9 %in% c('gene_id "HBD";', 'gene_id "GYPB";')),],
"../gowinda/baypass_core/output/gowinda_input/annotation_files/Homo_sapiens.GRCh37.87.chr_gene.symbol_sync_homologs_pathogen_ebel2017_rm_HBD_GYPB_TEST.gtf",
sep ="\t", row.names=FALSE, col.names=FALSE, quote=FALSE)
write.table(path.gtf[!(path.gtf$V9 %in% c('gene_id "HBB";', 'gene_id "GYPA";')),],
"../gowinda/baypass_core/output/gowinda_input/annotation_files/Homo_sapiens.GRCh37.87.chr_gene.symbol_sync_homologs_pathogen_ebel2017_rm_HBB_GYPA_TEST.gtf",
sep ="\t", row.names=FALSE, col.names=FALSE, quote=FALSE)
write.table(path.gtf[!(path.gtf$V9 %in% c('gene_id "HBD";', 'gene_id "GYPA";')),],
"../gowinda/baypass_core/output/gowinda_input/annotation_files/Homo_sapiens.GRCh37.87.chr_gene.symbol_sync_homologs_pathogen_ebel2017_rm_HBD_GYPA_TEST.gtf",
sep ="\t", row.names=FALSE, col.names=FALSE, quote=FALSE)
tail_dfs=list()
big_df=NULL
tails_suffixs=c(".pos_beta", ".neg_beta")
for(suffix in c('_rm_HBB_GYPB_TEST', '_rm_HBD_GYPB_TEST', '_rm_HBB_GYPA_TEST', '_rm_HBD_GYPA_TEST')){
cat(suffix)
plot_gowinda_all(subsps='w',
env_data=env_data,
covs=covs,
tails=tails,
gene.set=paste0('pathogen_ebel2017', suffix))
if(suffix=='_rm_HBB_GYPB_TEST'){title="HBB-GYPB"}
if(suffix=='_rm_HBD_GYPB_TEST'){title="HBD-GYPB"}
if(suffix=='_rm_HBB_GYPA_TEST'){title="HBB-GYPA"}
if(suffix=='_rm_HBD_GYPA_TEST'){title="HBD-GYPA"}
tail_dfs[[title]]=NULL
for(fpr in 100*fprs){
#tail_df=data.frame(V1=c(paste0(fpr, "%"), 'Gene Set'), V5=c('-', 'Tail'))
tmp=fread(paste0("../gowinda/baypass_aux/output/gowinda_output/forest_tree_pct/w.forest_tree_pct-forest_tree_pct.fpr",fpr,
"pct.non-genic_1000bp.flanks.pos_beta.gowinda_out.pathogen_ebel2017", suffix))
#tmp=tmp[tmp$V1 %in% c('Malaria (Daub et al., 2013)', 'Malaria (erythrocyte genes) (Ebel et al., 2021)'), c('V1', 'V5')]
tmp=tmp[, c('V9', 'V5')]
colnames(tmp)=c("Gene Set", paste0(fpr, "%"))
tmp$`Gene Set`=gsub("_", " ", tmp$`Gene Set`)
if(is.null(tail_dfs[[title]])){
tail_dfs[[title]]=tmp
}else{
tail_dfs[[title]]=merge(tail_dfs[[title]], tmp, by='Gene Set')
}
}
tail_dfs[[title]]$`Genes Removed`=title
tail_dfs[[title]]=tail_dfs[[title]][c('Genes Removed', 'Gene Set', '0.5%', '0.1%', '0.05%')]
tail_dfs[[title]]=tail_dfs[[title]][tail_dfs[[title]]$`Gene Set`!='all genes',]
tail_dfs[[title]]=tail_dfs[[title]][order(tail_dfs[[title]]$`0.5%`, tail_dfs[[title]]$`0.1%`, tail_dfs[[title]]$`0.05%`),]
if(is.null(big_df)){
big_df=tail_dfs[[title]]
}else{
big_df=rbind(big_df, tail_dfs[[title]])
}
}
path.gtf=fread("../gowinda/baypass_core/output/gowinda_input/annotation_files/Homo_sapiens.GRCh37.87.chr_gene.symbol_sync_homologs_pathogen_ebel2017.gtf")
tmp.gtf=path.gtf[path.gtf$V9=='gene_id "GYPB";',]
# The gene corodinates used are from ensembl
head(tmp.gtf[order(-tmp.gtf$V5),], 10)
# I change the gene coordinates to match the largest position reported for havana and remove the exons that lie outside this
path.gtf[path.gtf$V9=='gene_id "GYPB";' & path.gtf$V3=='gene' & path.gtf$V5==145061844, 'V5']=144940498
path.gtf=path.gtf[!(path.gtf$V9=='gene_id "GYPB";' & path.gtf$V5>144940498),]
path.gtf$V5=as.integer(path.gtf$V5)
write.table(path.gtf,
"../gowinda/baypass_core/output/gowinda_input/annotation_files/Homo_sapiens.GRCh37.87.chr_gene.symbol_sync_homologs_pathogen_ebel2017_GYPB_coord_fix.gtf",
sep ="\t", row.names=FALSE, col.names=FALSE, quote=FALSE)
source("scripts/baypass_tools.R")
gtf.B.fix=gtf
gtf.B.fix[gtf.B.fix$V10=='GYPB' & gtf.B.fix$V3=='gene' & gtf.B.fix$V5==145061844, 'V5']=144940498
gtf.B.fix=gtf.B.fix[!(gtf.B.fix$V10=='GYPB' & gtf.B.fix$V5>144940498),]
genes.tmp=c("GYPA", "GYPB")
chrs=unique(gtf.B.fix[gtf.B.fix$V10 %in% genes.tmp,'V1'])
for(chr in chrs){
xlim=c(min(gtf.B.fix[gtf.B.fix$V10 %in% genes.tmp & gtf.B.fix$V1==chr,'V4'])-flank, max(gtf.B.fix[gtf.B.fix$V10 %in% genes.tmp & gtf.B.fix$V1==chr,'V5'])+flank)
for(subsp in subsps[subsps!='n']){
tmp=betai[['exome']][[subsp]][betai[['exome']][[subsp]]$chr == chr,]
tmp=tmp[tmp$chr == chr & tmp$pos>xlim[1] & tmp$pos<xlim[2],]
gtf.tmp=gtf.B.fix[gtf.B.fix$V1 == chr & gtf.B.fix$V4 > xlim[1] & gtf.B.fix$V5 < xlim[2],]
#gtf.tmp=gtf.B.fix[gtf.B.fix$V1 == chr & gtf.B.fix$V4 > xlim[1] & gtf.B.fix$V5 < xlim[2] & gtf.B.fix$V10 %in% genes.tmp,]
if(!is.null(tmp)){
colnames(tmp)[colnames(tmp)=="BF(dB).median"]="BF"
manhattan_plot.v2(tmp, title=paste0(subsp_names[[subsp]], ": GEA"),
stat="BF", gtf=gtf.tmp,
focal.snps.list=list(tmp[tmp$fpr<0.005,], tmp[tmp$fpr<0.001,], tmp[tmp$fpr<0.0005,]),
focal.snps.cols=c("purple", "red", "darkorange"),
cov_col=NULL, xlim=xlim, gtf_features=c("exon"), gene_names=T, trans_dir=T)
}
}
}
rm(list=ls())
knitr::opts_knit$set(root.dir = '~/OneDrive - University College London/Projects/PanAf/phase1and2_exomes/gowinda/baypass_core/')
myriad.output="/Users/harrisonostridge/OneDrive - University College London/myriad/phase1and2_exome_output/"
library(data.table)
options(datatable.fread.datatable=FALSE)
library(dplyr)
library(ggplot2)
library(wesanderson)
library(VennDiagram)
library(UpSetR)
library(tidyverse)
library(ggh4x)
source("scripts/plot_gowinda.R")
stat='fpr'
subsps=c('all','ce', 'n', 'w')
if(stat=='p'){
tails=c('0.5pct-cov_cor', '0.1pct-cov_cor', '0.05pct-cov_cor')
stat_name="Empirical tails"
}else if(stat=='fpr'){
tails=c('fpr0.5pct.non-genic_1000bp.flanks', 'fpr0.1pct.non-genic_1000bp.flanks', 'fpr0.05pct.non-genic_1000bp.flanks')
stat_name="Candidate tails"
}else{
stop("Define stat as either 'p' (empircical p value) or fpr (FPR)")
}
plot_gowinda_all=function(subsps, tails, gene.set){
for(subsp in subsps){
cat("-", subsp, "\n")
for(tail in tails){
gowinda_output_file=paste0("output/gowinda_output/",subsp,"/",subsp,".",tail,".gowinda_out.", gene.set)
if(file.exists(gowinda_output_file) & file.size(gowinda_output_file) > 0){
df=fread(gowinda_output_file)
if(nrow(df>0)){plot_gowinda(df, title=paste0(subsp, ": ", "\n", tail, " candidates"))}
}
}
}
}
plot_gowinda_all(subsps=subsps, tails=tails, gene.set='go')
subsp='ce'
tail='fpr0.1pct.non-genic_1000bp.flanks'
gene.set='go'
gowinda_out=fread(paste0("output/gowinda_output/",subsp,"/",subsp,".",tail,".gowinda_out.", gene.set), sep='\t', header=F)
genes=gowinda_out[1:3,10]
genes=strsplit(genes, ",")
names(genes)=gowinda_out[1:3,9]
cat(subsp, gene.set, tail)
upset(fromList(genes), sets = rev(names(genes)), keep.order = TRUE, order.by = "degree")
plot_gowinda_all(subsps=subsps, tails=tails, gene.set='reac')
plot_gowinda_all(subsps=subsps, tails=tails, gene.set='gwas')
plot_gowinda_all(subsps=subsps, tails=tails, gene.set='pathogen_ebel2017')
plot_gowinda_all
gene.set='pathogen_ebel2017'
subsp='w'
tail=tails[1]
paste0("output/gowinda_output/",subsp,"/",subsp,".",tail,".gowinda_out.", gene.set)
rm(list=ls())
knitr::opts_knit$set(root.dir = '~/OneDrive - University College London/Projects/PanAf/phase1and2_exomes/baypass/')
myriad.output="../../../../../myriad/phase1and2_exome_output/"
subsps=c('all', 'ce', 'n', 'w')
env_data='forest_tree_pct'
omega_run=''
fprs=c(0.005, 0.001, 0.0005)
tail_thresh=0.005
library(data.table)
options(datatable.fread.datatable=FALSE)
library(dplyr)
library(ggplot2)
library(ggrepel)
library(ape)
library(dendextend)
library(gplots)
library(cluster)
library(fpc)
library(viridis)
library(rgdal)
library(readxl)
library(wesanderson)
library(stringr)
library(corrplot)
# Call scripts containing custom functions
source("scripts/baypass_tools.R")
source("baypass_core/baypass_core_inference/scripts/plotting_tools/candidate_allele_frequency_patterns.R")
source("baypass_core/scripts/baypass_core_tools.R")
source("baypass_aux/scripts/baypass_aux_tools.R")
source("../allele.frequencies/scripts/allele_frequency_tools.R")
source("baypass_2.2/utils/baypass_utils.R")
detach(package:plyr)
suffix=paste0(".non-genic_1000bp.flanks")
for(subsp in subsps){
if(subsp=='all'){subsp.file=''}else{subsp.file=paste0(".", subsp)}
if(subsp=='n'){miss.pop=0}else{miss.pop=0.3}
# Remove GYPA SNPs
betai.tmp=betai[['exome']][[subsp]][!(betai[['exome']][[subsp]]$chr_pos %in% c('4_145039806', '4_145040845')) |
!(betai[['exome']][[subsp]]$gene %in% c('GYPA', 'GYPB')),]
# Write FPR data
for(fpr in fprs){
# Write Gowinda input files
for(cov in unique(betai.tmp$COVARIABLE_name)){
## Both
write.table(unique(betai.tmp[betai.tmp$COVARIABLE_name==cov & betai.tmp$fpr<fpr, c("chr", "pos")]),
paste0("../gowinda/baypass_aux/output/gowinda_input/snp_files/", env_data,"/",subsp,".", env_data,"-",cov,".fpr",100*fpr, "pct" ,suffix, ".rmGYPA"),
col.names=F, row.names=F, sep="\t")
## Positive beta
write.table(unique(betai.tmp[betai.tmp$COVARIABLE_name==cov & betai.tmp$fpr<fpr & betai.tmp$M_Beta.median>0, c("chr", "pos")]),
paste0("../gowinda/baypass_aux/output/gowinda_input/snp_files/", env_data,"/",subsp,".", env_data,"-",cov,".fpr",100*fpr, "pct" ,suffix, ".pos_beta.rmGYPA"),
col.names=F, row.names=F, sep="\t")
## Negative beta
write.table(unique(betai.tmp[betai.tmp$COVARIABLE_name==cov & betai.tmp$fpr<fpr & betai.tmp$M_Beta.median<0, c("chr", "pos")]),
paste0("../gowinda/baypass_aux/output/gowinda_input/snp_files/", env_data,"/",subsp,".", env_data,"-",cov,".fpr",100*fpr, "pct" ,suffix, ".neg_beta.rmGYPA"),
col.names=F, row.names=F, sep="\t")
}
}
}
rm(list=ls())
knitr::opts_knit$set(root.dir = '~/OneDrive - University College London/Projects/PanAf/phase1and2_exomes/baypass/')
myriad.output="../../../../../myriad/phase1and2_exome_output/"
subsps=c('all', 'ce', 'n', 'w')
env_data='forest_tree_pct'
omega_run=''
fprs=c(0.005, 0.001, 0.0005)
tail_thresh=0.005
library(data.table)
options(datatable.fread.datatable=FALSE)
library(dplyr)
library(ggplot2)
library(ggrepel)
library(ape)
library(dendextend)
library(gplots)
library(cluster)
library(fpc)
library(viridis)
library(rgdal)
library(readxl)
library(wesanderson)
library(stringr)
library(corrplot)
# Call scripts containing custom functions
source("scripts/baypass_tools.R")
source("baypass_core/baypass_core_inference/scripts/plotting_tools/candidate_allele_frequency_patterns.R")
source("baypass_core/scripts/baypass_core_tools.R")
source("baypass_aux/scripts/baypass_aux_tools.R")
source("../allele.frequencies/scripts/allele_frequency_tools.R")
source("baypass_2.2/utils/baypass_utils.R")
detach(package:plyr)
suffix=paste0(".non-genic_1000bp.flanks")
for(subsp in subsps){
if(subsp=='all'){subsp.file=''}else{subsp.file=paste0(".", subsp)}
if(subsp=='n'){miss.pop=0}else{miss.pop=0.3}
# Remove GYPA SNPs
betai.tmp=betai[['exome']][[subsp]][!(betai[['exome']][[subsp]]$chr_pos %in% c('4_145039806', '4_145040845')) |
!(betai[['exome']][[subsp]]$gene %in% c('GYPA', 'GYPB')),]
# Write FPR data
for(fpr in fprs){
# Write Gowinda input files
for(cov in unique(betai.tmp$COVARIABLE_name)){
## Both
write.table(unique(betai.tmp[betai.tmp$COVARIABLE_name==cov & betai.tmp$fpr<fpr, c("chr", "pos")]),
paste0("../gowinda/baypass_aux/output/gowinda_input/snp_files/", env_data,"/",subsp,".", env_data,"-",cov,".fpr",100*fpr, "pct" ,suffix, ".rmGYPA"),
col.names=F, row.names=F, sep="\t")
## Positive beta
write.table(unique(betai.tmp[betai.tmp$COVARIABLE_name==cov & betai.tmp$fpr<fpr & betai.tmp$M_Beta.median>0, c("chr", "pos")]),
paste0("../gowinda/baypass_aux/output/gowinda_input/snp_files/", env_data,"/",subsp,".", env_data,"-",cov,".fpr",100*fpr, "pct" ,suffix, ".pos_beta.rmGYPA"),
col.names=F, row.names=F, sep="\t")
## Negative beta
write.table(unique(betai.tmp[betai.tmp$COVARIABLE_name==cov & betai.tmp$fpr<fpr & betai.tmp$M_Beta.median<0, c("chr", "pos")]),
paste0("../gowinda/baypass_aux/output/gowinda_input/snp_files/", env_data,"/",subsp,".", env_data,"-",cov,".fpr",100*fpr, "pct" ,suffix, ".neg_beta.rmGYPA"),
col.names=F, row.names=F, sep="\t")
}
}
}
source("../gowinda/baypass_core/scripts/plot_gowinda.R")
tails_suffixs=c(".pos_beta.rmGYPA", ".neg_beta.rmGYPA")
tails=c("fpr0.5pct.non-genic_1000bp.flanks", "fpr0.1pct.non-genic_1000bp.flanks", "fpr0.05pct.non-genic_1000bp.flanks")
plot_gowinda_all=function(subsps, env_data, covs, tails, gene.set){
for(subsp in subsps){
cat("-", subsp, "\n")
for(cov in covs){
for(tail_suffix in tails_suffixs){
cat("--", tail_suffix, "\n")
for(tail in paste0(tails, tail_suffix)){
gowinda_output_file=paste0("../gowinda/baypass_aux/output/gowinda_output/",env_data,"/",subsp,".",env_data,"-",cov,".",tail,".gowinda_out.", gene.set)
#cat(gowinda_output_file)
if(file.exists(gowinda_output_file) & file.size(gowinda_output_file) > 0){
df=fread(gowinda_output_file)
if(nrow(df>0)){plot_gowinda(df, title=paste0(subsp,": ",env_data, ": ", cov, "\n", tail, " candidates"))}
}
}
}
}
}
}
plot_gowinda_all(subsps=subsps,
env_data=env_data,
covs=covs,
tails=tails,
gene.set='pathogen_ebel2017')
rm(list=ls())
knitr::opts_knit$set(root.dir = '~/OneDrive - University College London/Projects/PanAf/phase1and2_exomes/gowinda/baypass_core/')
myriad.output="/Users/harrisonostridge/OneDrive - University College London/myriad/phase1and2_exome_output/"
library(data.table)
options(datatable.fread.datatable=FALSE)
library(dplyr)
library(ggplot2)
library(wesanderson)
library(VennDiagram)
library(UpSetR)
library(tidyverse)
library(ggh4x)
source("scripts/plot_gowinda.R")
stat='fpr'
subsps=c('all','ce', 'n', 'w')
if(stat=='p'){
tails=c('0.5pct-cov_cor', '0.1pct-cov_cor', '0.05pct-cov_cor')
stat_name="Empirical tails"
}else if(stat=='fpr'){
tails=c('fpr0.5pct.non-genic_1000bp.flanks', 'fpr0.1pct.non-genic_1000bp.flanks', 'fpr0.05pct.non-genic_1000bp.flanks')
stat_name="Candidate tails"
}else{
stop("Define stat as either 'p' (empircical p value) or fpr (FPR)")
}
plot_gowinda_all=function(subsps, tails, gene.set){
for(subsp in subsps){
cat("-", subsp, "\n")
for(tail in tails){
gowinda_output_file=paste0("output/gowinda_output/",subsp,"/",subsp,".",tail,".gowinda_out.", gene.set)
if(file.exists(gowinda_output_file) & file.size(gowinda_output_file) > 0){
df=fread(gowinda_output_file)
if(nrow(df>0)){plot_gowinda(df, title=paste0(subsp, ": ", "\n", tail, " candidates"))}
}
}
}
}
plot_gowinda_all(subsps=subsps, tails=tails, gene.set='pathogen_ebel2017')
gene.set='pathogen_ebel2017'
subsp='w'
tail=tails[1]
paste0("output/gowinda_output/",subsp,"/",subsp,".",tail,".gowinda_out.", gene.set)
