max_n=1000
pgls.res=data.frame(Subspecies=c(), chr_pos=c(), FPR=c(), Direction=c(), r=c(), p=c())
for(subsp in subsps){
cat("------------------------", subsp, "------------------------\n")
# AF matrix
subsp.dac=ac[['exome']][[subsp]][, grepl(".dac$", names(ac[['exome']][[subsp]]))]
subsp.aac=ac[['exome']][[subsp]][, grepl(".aac$", names(ac[['exome']][[subsp]]))]
subsp.daf=subsp.dac/(subsp.dac+subsp.aac)
colnames(subsp.daf)=gsub("_chr.*", "", colnames(subsp.daf))
subsp.daf$chr_pos=paste(ac[['exome']][[subsp]]$chr, ac[['exome']][[subsp]]$pos, sep="_")
subsp.daf[subsp.daf=='NaN']=NA
# Estimate tree
complete=subsp.daf[complete.cases(subsp.daf), colnames(subsp.daf)!='chr_pos']
## Covariance matrix
#cov_m=cov(complete)
#plot.omega.heatmap(cov_m)
## Tree
### Make distance matrix
#cor_m=cov2cor(cov_m)
#dist=as.dist(1 - cor_m)
dist=dist(t(complete), method = "euclidean")
## Make tree
#tree=hclust(dist, method="average")
tree=nj(dist)
tree=midpoint(tree)
plot(tree, cex=0.5)
# SNPs of interest
for(snp in c('chr4_145039806', 'chr4_145040845', 'chr11_5254366')){
cat("-----------------", snp, "-----------------\n")
if(snp %in% subsp.daf$chr_pos){
# PGLS
## PGLS dataframe
pgls.data=data.frame("Population"=pops[[subsp]],
"AF"=unlist(subsp.daf[subsp.daf$chr_pos==snp, colnames(subsp.daf)!='chr_pos'])[pops[[subsp]]],
"forest.tree.percentage"=unlist(cov.in[[subsp]][['Real']])[pops[[subsp]]])
## Run PGLS
pgls.data=comparative.data(phy = tree, data = pgls.data, names.col = Population, vcv = TRUE, na.omit = TRUE, warn.dropped = TRUE)
full.pgls=pgls(AF~forest.tree.percentage, data=pgls.data, lambda = "ML")
print(summary(full.pgls))
}
}
# All BayPass candidates
### Add covs to AF data frame
#cov.in.format=data.frame(Population=names(cov.in[[subsp]][['Real']]), forest_tree_pct=unlist(cov.in[[subsp]][['Real']]))
for(fpr in c(1, fprs)){
cat("\n-----------------", fpr*100, "%-----------------\n")
for(dir in c('Positive', 'Negative')){
if(dir=='Positive'){betai_cand.tmp=betai[['exome']][[subsp]][betai[['exome']][[subsp]]$fpr<fpr & betai[['exome']][[subsp]]$M_Beta.median>0,]}
if(dir=='Negative'){betai_cand.tmp=betai[['exome']][[subsp]][betai[['exome']][[subsp]]$fpr<fpr & betai[['exome']][[subsp]]$M_Beta.median<0,]}
# If there are too many SNPs take a subsample for computational efficiency
if(nrow(betai_cand.tmp)>max_n){
betai_cand.tmp=betai_cand.tmp[sample(nrow(betai_cand.tmp), max_n),]
}
row.names(subsp.daf)=subsp.daf$chr_pos
subsp.daf.cand=subsp.daf[subsp.daf$chr_pos %in% betai_cand.tmp$chr_pos, colnames(subsp.daf)!='chr_pos']
# Make big data frame with all SNPs
pgls.data=data.frame("Population"=pops[[subsp]],
"forest.tree.percentage"=unlist(cov.in[[subsp]][['Real']])[pops[[subsp]]])
subsp.daf.cand=as.data.frame(t(as.matrix(subsp.daf.cand)))
pgls.data=merge(pgls.data, subsp.daf.cand, by.x="Population", by.y=0)
# Loop over each SNP
for(snp in colnames(subsp.daf.cand)){
pgls.data.snp=comparative.data(phy = tree, data = pgls.data[c("Population", "forest.tree.percentage", snp)],
names.col = Population, vcv = TRUE, na.omit = TRUE, warn.dropped = TRUE)
# tryCatch means if an error occurs due to PGLS not converging it doesnt break the code, instead it just adds NA's
tryCatch({
full.pgls=NULL
full.pgls=pgls(as.formula(paste0(snp, "~forest.tree.percentage")), data=pgls.data.snp, lambda = "ML")
}, error = function(e) {
# Print error message and continue execution
#cat(snp, " failed to converge\n")
}, finally = {
# This block executes whether there is an error or not
if(is.null(full.pgls)){
# Add NAs if it didn't converge
pgls.res=rbind(pgls.res,
data.frame(Subspecies=subsp_name[[subsp]], chr_pos=snp, FPR=paste0(100*fpr,"%"), Direction=dir,
r=NA, p=NA))
}else{
# Add results otherwise
summary=summary(full.pgls)
pgls.res=rbind(pgls.res,
data.frame(Subspecies=subsp_name[[subsp]], chr_pos=snp, FPR=paste0(100*fpr,"%"), Direction=dir,
r=summary$coefficients[2,1], p=summary$coefficients[2,4]))
}})
}
tmp=pgls.res[pgls.res$Subspecies==subsp_name[[subsp]] & pgls.res$FPR==paste0(100*fpr,"%"), 'p']
cat(sum(is.na(tmp)), " SNPs (",100*sum(is.na(tmp))/length(tmp),"%) failed to converge\n\n")
}
}
}
# Plot all
pgls.res$FPR=factor(pgls.res$FPR, levels=rev(unique(pgls.res$FPR)[order(unique(pgls.res$FPR))]))
cor_stat_names=c('r'="Estimate", 'p'="P-value")
for(cor_stat in c('r', 'p')){
plot=ggplot(pgls.res, aes_string(x='FPR', y=cor_stat, fill='Direction', col='Direction'))+
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
#plot.subtitle = element_text(hjust = 0.5),
legend.position = "none",
strip.text = element_text(face = "italic"),
strip.background =element_rect(fill="white")) +
labs(title="PGLS",
#subtitle=stat_names[[stat]],
x="FPR tail",
y=cor_stat_names[[cor_stat]]) +
geom_boxplot(outlier.shape = 1) +
facet_grid(. ~Subspecies, space='free') +
scale_discrete_manual(aesthetics = c("fill"), values = c('Positive' = 'deepskyblue', 'Negative'='red')) +
scale_discrete_manual(aesthetics = c("colour"), values = c('Positive' = 'deepskyblue4', 'Negative'='darkred'))
if(cor_stat=="r"){
plot=plot+
geom_hline(yintercept=0)+
#ylim(-1,1)
ylim(-0.5,0.5)
}
if(cor_stat=="p"){
plot=plot+
ylim(0,1)
}
print(plot)
}
for(subsp in unique(pgls.res$Subspecies)){
for(dir in unique(pgls.res$Direction)){
pgls.res.tmp=pgls.res[pgls.res$Subspecies==subsp & pgls.res$Direction==dir, ]
if(dir=="Positive"){subtitle="(forest candidates)"}
if(dir=="Negative"){subtitle="(savannah candidates)"}
for(cor_stat in c('p')){
pgls.res.tmp.bg=pgls.res.tmp[pgls.res.tmp$FPR=='100%',]
if(cor_stat=='p'){
p=pgls.res.tmp.bg[[cor_stat]]
p=p[!is.na(p)]
thresh_5pct=max(head(p[order(p)], round(0.05*length(p))))
}
# Full
binwidth=0.02
plot1=ggplot(pgls.res.tmp, aes_string(x=cor_stat, colour='FPR'))+
theme_bw() +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5)) +
labs(title=paste0(subsp, ': ', dir), subtitle=subtitle, y='Density') +
stat_bin(aes(y = after_stat(density), colour=FPR), alpha=1, binwidth=binwidth, geom="step",
position=position_nudge(x=0*binwidth)
) +
#geom_density() +
geom_vline(xintercept = thresh_5pct, color = "black", linetype = "dashed")+
xlim(0,1) + ylim(0,50) +
scale_discrete_manual(name='', values = c('100%' = 'black', '0.5%' = 'purple', '0.1%' = 'red', '0.05%' = 'darkorange'), aesthetics = c("colour", "fill"))
print(plot1)
# Zoomed in
binwidth=thresh_5pct/20
plot2=ggplot(pgls.res.tmp, aes_string(x=cor_stat, colour='FPR'))+
theme_bw() +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5)) +
labs(title=paste0(subsp, ': ', dir), subtitle=subtitle, y='Density') +
stat_bin(aes(y = after_stat(density), colour=FPR), alpha=1, binwidth=binwidth, geom="step",
position=position_nudge(x=0*binwidth)
) +
#geom_density() +
geom_vline(xintercept = thresh_5pct, color = "black", linetype = "dashed")+
coord_cartesian(xlim = c(0, thresh_5pct)) +
scale_discrete_manual(name='', values = c('100%' = 'black', '0.5%' = 'purple', '0.1%' = 'red', '0.05%' = 'darkorange'), aesthetics = c("colour", "fill"))
print(plot2)
}
}
}
# Select genes?
genes=fread("../gowinda/baypass_aux/output/gowinda_output/f_over_sum_known_trees/w.f_over_sum_known_trees-f_over_sum_known_trees.fpr0.5pct.non-genic_1000bp.flanks.pos_beta.gowinda_out.pathogen_ebel2017")
genes=genes[grepl("^Malaria", genes$V1), ]
genes=toupper(unique(unlist(strsplit(genes$V10, ','))))
cor_stat='p'
for(subsp in 'w'){
gene_snps=ann[['exome']][[subsp]][ann[['exome']][[subsp]]$gene %in% genes, 'chr_pos']
gene_snps=paste0("chr", gene_snps)
f_cands=betai[['exome']][[subsp]][betai[['exome']][[subsp]]$fpr<0.005 & betai[['exome']][[subsp]]$M_Beta.median>0, 'chr_pos']
snps=gene_snps[gene_snps %in% f_cands]
pgls.res.snps=pgls.res[pgls.res$Subspecies==subsp_name[[subsp]] & pgls.res$chr_pos %in% snps,]
print(pgls.res.snps)
plot=ggplot(pgls.res.snps, aes_string(x=cor_stat, colour='FPR'))+
theme_bw() +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5)) +
labs(title=paste0(subsp, ' malaria forest candidates'), y='Density') +
stat_bin(aes(y = after_stat(density), colour=FPR), alpha=1, binwidth=binwidth, geom="step",
position=position_nudge(x=0*binwidth)
) +
#geom_density() +
#geom_vline(xintercept = thresh_5pct, color = "black", linetype = "dashed")+
xlim(0,1) +
scale_discrete_manual(name='', values = c('100%' = 'black', '0.5%' = 'purple', '0.1%' = 'red', '0.05%' = 'darkorange'), aesthetics = c("colour", "fill"))
print(plot)
pgls.res.snps=unique(pgls.res.snps[colnames(pgls.res.snps)!='FPR'])
print(pgls.res.snps[order(-pgls.res.snps$p),])
cat("Maximum p = ", max(pgls.res.snps$p))
}
max_n=1000
# AF matrix
subsp.dac=ac[['exome']][['all']][, grepl(".dac$", names(ac[['exome']][['all']]))]
subsp.aac=ac[['exome']][['all']][, grepl(".aac$", names(ac[['exome']][['all']]))]
subsp.daf=subsp.dac/(subsp.dac+subsp.aac)
colnames(subsp.daf)=gsub("_chr.*", "", colnames(subsp.daf))
subsp.daf$chr_pos=paste(ac[['exome']][['all']]$chr, ac[['exome']][['all']]$pos, sep="_")
subsp.daf[subsp.daf=='NaN']=NA
# Select only central and eastern
ce_cols=colnames(subsp.daf)[grepl("^c_|^e_", colnames(subsp.daf))]
tmp=subsp.daf[subsp.daf$chr_pos=='chr11_5254366',]
tmp=tmp[colSums(is.na(tmp)) == 0]
ce_cols=ce_cols[ce_cols %in% colnames(tmp)]
# Select only those with data for the focal SNP
subsp.daf=subsp.daf[c('chr_pos', ce_cols)]
# Estimate tree
complete=subsp.daf[complete.cases(subsp.daf), colnames(subsp.daf)!='chr_pos']
## Covariance matrix
#cov_m=cov(complete)
#plot.omega.heatmap(cov_m)
## Tree
### Make distance matrix
#cor_m=cov2cor(cov_m)
#dist=as.dist(1 - cor_m)
dist=dist(t(complete), method = "euclidean")
## Make tree
#tree=hclust(dist, method="average")
tree=nj(dist)
tree=midpoint(tree)
plot(tree, cex=0.5)
# SNPs of interest
for(snp in c('chr11_5254366')){
cat("-----------------", snp, "-----------------\n")
if(snp %in% subsp.daf$chr_pos){
AF=subsp.daf[subsp.daf$chr_pos==snp, ce_cols]
# PGLS
## PGLS dataframe
pgls.data=data.frame("Population"=ce_cols,
"AF"=unlist(AF[ce_cols]),
"forest.tree.percentage"=unlist(cov.in[['all']][['Real']][ce_cols]))
## Run PGLS
pgls.data=comparative.data(phy = tree, data = pgls.data, names.col = Population, vcv = TRUE, na.omit = TRUE, warn.dropped = TRUE)
full.pgls=pgls(AF~forest.tree.percentage, data=pgls.data, lambda = "ML")
print(summary(full.pgls))
}
}
subsp.daf.cand=subsp.daf
# If there are too many SNPs take a subsample for computational efficiency
if(nrow(subsp.daf.cand)>max_n){
subsp.daf.cand=subsp.daf.cand[sample(nrow(subsp.daf.cand), max_n),]
}
rownames(subsp.daf.cand)=subsp.daf.cand$chr_pos
# Make big data frame with all SNPs
pgls.data=data.frame("Population"=ce_cols,
"forest.tree.percentage"=unlist(cov.in[['ce']][['Real']][ce_cols]))
subsp.daf.cand=as.data.frame(t(as.matrix(subsp.daf.cand)))
subsp.daf.cand=subsp.daf.cand[rownames(subsp.daf.cand)!='chr_pos',]
# Remove monogenic sites
rownames=rownames(subsp.daf.cand)
subsp.daf.cand=as.data.frame(lapply(subsp.daf.cand, function(x) as.numeric(as.character(x))))
rownames(subsp.daf.cand)=rownames
#subsp.daf.cand=subsp.daf.cand[colSums(subsp.daf.cand)>0]
pgls.data=merge(pgls.data, subsp.daf.cand, by.x="Population", by.y=0)
# Loop over each SNP
pgls.res.test=data.frame(Subspecies=c(), chr_pos=c(), r=c(), p=c())
for(snp in colnames(subsp.daf.cand)){
pgls.data[[snp]]=as.numeric(as.character(pgls.data[[snp]]))
pgls.data.snp=comparative.data(phy = tree, data = pgls.data[c("Population", "forest.tree.percentage", snp)],
names.col = Population, vcv = TRUE, na.omit = TRUE, warn.dropped = TRUE)
# tryCatch means if an error occurs due to PGLS not converging it doesnt break the code, instead it just adds NA's
tryCatch({
full.pgls=NULL
full.pgls=pgls(as.formula(paste0(snp, "~forest.tree.percentage")), data=pgls.data.snp, lambda = "ML")
}, error = function(e) {
# Print error message and continue execution
#cat(snp, " failed to converge\n")
}, finally = {
# This block executes whether there is an error or not
if(is.null(full.pgls)){
# Add NAs if it didn't converge
pgls.res.test=rbind(pgls.res.test,
data.frame(Subspecies="C-E", chr_pos=snp,
r=NA, p=NA))
}else{
# Add results otherwise
summary=summary(full.pgls)
pgls.res.test=rbind(pgls.res.test,
data.frame(Subspecies="C-E", chr_pos=snp,
r=summary$coefficients[2,1], p=summary$coefficients[2,4]))
}})
}
tmp=pgls.res.test[pgls.res.test$Subspecies=="C-E", 'p']
cat(sum(is.na(tmp)), " SNPs (",100*sum(is.na(tmp))/length(tmp),"%) failed to converge\n\n")
tmp=tmp[!is.na(tmp)]
thresh_5pct=max(head(tmp[order(tmp)], round(0.05*length(tmp))))
binwidth=0.02
ggplot(pgls.res.test, aes_string(x='p'))+
theme_bw() +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5)) +
labs(title=paste0("Background p-values for All subsampled\nto only C-E populations"), y='Density') +
stat_bin(aes(y = after_stat(density)), alpha=1, binwidth=binwidth, geom="step",
position=position_nudge(x=0*binwidth)
) +
#geom_density() +
geom_vline(xintercept = thresh_5pct, color = "black", linetype = "dashed") +
xlim(0,1)
max_n=1000
# AF matrix
subsp.dac=ac[['exome']][['all']][, grepl(".dac$", names(ac[['exome']][['all']]))]
subsp.aac=ac[['exome']][['all']][, grepl(".aac$", names(ac[['exome']][['all']]))]
subsp.daf=subsp.dac/(subsp.dac+subsp.aac)
colnames(subsp.daf)=gsub("_chr.*", "", colnames(subsp.daf))
subsp.daf$chr_pos=paste(ac[['exome']][['all']]$chr, ac[['exome']][['all']]$pos, sep="_")
subsp.daf[subsp.daf=='NaN']=NA
# Select only central and eastern
ce_cols=colnames(subsp.daf)[grepl("^e_", colnames(subsp.daf))]
tmp=subsp.daf[subsp.daf$chr_pos=='chr11_5254366',]
tmp=tmp[colSums(is.na(tmp)) == 0]
ce_cols=ce_cols[ce_cols %in% colnames(tmp)]
# Select only those with data for the focal SNP
subsp.daf=subsp.daf[c('chr_pos', ce_cols)]
# Estimate tree
complete=subsp.daf[complete.cases(subsp.daf), colnames(subsp.daf)!='chr_pos']
## Covariance matrix
#cov_m=cov(complete)
#plot.omega.heatmap(cov_m)
## Tree
### Make distance matrix
#cor_m=cov2cor(cov_m)
#dist=as.dist(1 - cor_m)
dist=dist(t(complete), method = "euclidean")
## Make tree
#tree=hclust(dist, method="average")
tree=nj(dist)
tree=midpoint(tree)
plot(tree, cex=0.5)
# SNPs of interest
for(snp in c('chr11_5254366')){
cat("-----------------", snp, "-----------------\n")
if(snp %in% subsp.daf$chr_pos){
AF=subsp.daf[subsp.daf$chr_pos==snp, ce_cols]
# PGLS
## PGLS dataframe
pgls.data=data.frame("Population"=ce_cols,
"AF"=unlist(AF[ce_cols]),
"forest.tree.percentage"=unlist(cov.in[['all']][['Real']][ce_cols]))
## Run PGLS
pgls.data=comparative.data(phy = tree, data = pgls.data, names.col = Population, vcv = TRUE, na.omit = TRUE, warn.dropped = TRUE)
full.pgls=pgls(AF~forest.tree.percentage, data=pgls.data, lambda = "ML")
print(summary(full.pgls))
}
}
subsp.daf.cand=subsp.daf
# If there are too many SNPs take a subsample for computational efficiency
if(nrow(subsp.daf.cand)>max_n){
subsp.daf.cand=subsp.daf.cand[sample(nrow(subsp.daf.cand), max_n),]
}
rownames(subsp.daf.cand)=subsp.daf.cand$chr_pos
# Make big data frame with all SNPs
pgls.data=data.frame("Population"=ce_cols,
"forest.tree.percentage"=unlist(cov.in[['ce']][['Real']][ce_cols]))
subsp.daf.cand=as.data.frame(t(as.matrix(subsp.daf.cand)))
subsp.daf.cand=subsp.daf.cand[rownames(subsp.daf.cand)!='chr_pos',]
# Remove monogenic sites
rownames=rownames(subsp.daf.cand)
subsp.daf.cand=as.data.frame(lapply(subsp.daf.cand, function(x) as.numeric(as.character(x))))
rownames(subsp.daf.cand)=rownames
#subsp.daf.cand=subsp.daf.cand[colSums(subsp.daf.cand)>0]
pgls.data=merge(pgls.data, subsp.daf.cand, by.x="Population", by.y=0)
# Loop over each SNP
pgls.res.test=data.frame(Subspecies=c(), chr_pos=c(), r=c(), p=c())
for(snp in colnames(subsp.daf.cand)){
pgls.data[[snp]]=as.numeric(as.character(pgls.data[[snp]]))
pgls.data.snp=comparative.data(phy = tree, data = pgls.data[c("Population", "forest.tree.percentage", snp)],
names.col = Population, vcv = TRUE, na.omit = TRUE, warn.dropped = TRUE)
# tryCatch means if an error occurs due to PGLS not converging it doesnt break the code, instead it just adds NA's
tryCatch({
full.pgls=NULL
full.pgls=pgls(as.formula(paste0(snp, "~forest.tree.percentage")), data=pgls.data.snp, lambda = "ML")
}, error = function(e) {
# Print error message and continue execution
#cat(snp, " failed to converge\n")
}, finally = {
# This block executes whether there is an error or not
if(is.null(full.pgls)){
# Add NAs if it didn't converge
pgls.res.test=rbind(pgls.res.test,
data.frame(Subspecies="C-E", chr_pos=snp,
r=NA, p=NA))
}else{
# Add results otherwise
summary=summary(full.pgls)
pgls.res.test=rbind(pgls.res.test,
data.frame(Subspecies="C-E", chr_pos=snp,
r=summary$coefficients[2,1], p=summary$coefficients[2,4]))
}})
}
tmp=pgls.res.test[pgls.res.test$Subspecies=="C-E", 'p']
cat(sum(is.na(tmp)), " SNPs (",100*sum(is.na(tmp))/length(tmp),"%) failed to converge\n\n")
tmp=tmp[!is.na(tmp)]
thresh_5pct=max(head(tmp[order(tmp)], round(0.05*length(tmp))))
binwidth=0.02
ggplot(pgls.res.test, aes_string(x='p'))+
theme_bw() +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5)) +
labs(title=paste0("Background p-values for All subsampled\nto only C-E populations"), y='Density') +
stat_bin(aes(y = after_stat(density)), alpha=1, binwidth=binwidth, geom="step",
position=position_nudge(x=0*binwidth)
) +
#geom_density() +
geom_vline(xintercept = thresh_5pct, color = "black", linetype = "dashed") +
xlim(0,1)
tree
max_n=1000
# AF matrix
subsp.dac=ac[['exome']][['all']][, grepl(".dac$", names(ac[['exome']][['all']]))]
subsp.aac=ac[['exome']][['all']][, grepl(".aac$", names(ac[['exome']][['all']]))]
subsp.daf=subsp.dac/(subsp.dac+subsp.aac)
colnames(subsp.daf)=gsub("_chr.*", "", colnames(subsp.daf))
subsp.daf$chr_pos=paste(ac[['exome']][['all']]$chr, ac[['exome']][['all']]$pos, sep="_")
subsp.daf[subsp.daf=='NaN']=NA
# Select only central and eastern
ce_cols=colnames(subsp.daf)[grepl("^c_|^e_", colnames(subsp.daf))]
tmp=subsp.daf[subsp.daf$chr_pos=='chr11_5254366',]
tmp=tmp[colSums(is.na(tmp)) == 0]
ce_cols=ce_cols[ce_cols %in% colnames(tmp)]
# Select only those with data for the focal SNP
subsp.daf=subsp.daf[c('chr_pos', ce_cols)]
# Estimate tree
complete=subsp.daf[complete.cases(subsp.daf), colnames(subsp.daf)!='chr_pos']
## Covariance matrix
#cov_m=cov(complete)
#plot.omega.heatmap(cov_m)
## Tree
### Make distance matrix
#cor_m=cov2cor(cov_m)
#dist=as.dist(1 - cor_m)
dist=dist(t(complete), method = "euclidean")
## Make tree
#tree=hclust(dist, method="average")
tree=nj(dist)
tree=midpoint(tree)
plot(tree, cex=0.5)
# SNPs of interest
for(snp in c('chr11_5254366')){
cat("-----------------", snp, "-----------------\n")
if(snp %in% subsp.daf$chr_pos){
AF=subsp.daf[subsp.daf$chr_pos==snp, ce_cols]
# PGLS
## PGLS dataframe
pgls.data=data.frame("Population"=ce_cols,
"AF"=unlist(AF[ce_cols]),
"forest.tree.percentage"=unlist(cov.in[['all']][['Real']][ce_cols]))
## Run PGLS
pgls.data=comparative.data(phy = tree, data = pgls.data, names.col = Population, vcv = TRUE, na.omit = TRUE, warn.dropped = TRUE)
full.pgls=pgls(AF~forest.tree.percentage, data=pgls.data, lambda = "ML")
print(summary(full.pgls))
}
}
subsp.daf.cand=subsp.daf
# If there are too many SNPs take a subsample for computational efficiency
if(nrow(subsp.daf.cand)>max_n){
subsp.daf.cand=subsp.daf.cand[sample(nrow(subsp.daf.cand), max_n),]
}
rownames(subsp.daf.cand)=subsp.daf.cand$chr_pos
# Make big data frame with all SNPs
pgls.data=data.frame("Population"=ce_cols,
"forest.tree.percentage"=unlist(cov.in[['ce']][['Real']][ce_cols]))
subsp.daf.cand=as.data.frame(t(as.matrix(subsp.daf.cand)))
subsp.daf.cand=subsp.daf.cand[rownames(subsp.daf.cand)!='chr_pos',]
# Remove monogenic sites
rownames=rownames(subsp.daf.cand)
subsp.daf.cand=as.data.frame(lapply(subsp.daf.cand, function(x) as.numeric(as.character(x))))
rownames(subsp.daf.cand)=rownames
#subsp.daf.cand=subsp.daf.cand[colSums(subsp.daf.cand)>0]
pgls.data=merge(pgls.data, subsp.daf.cand, by.x="Population", by.y=0)
# Loop over each SNP
pgls.res.test=data.frame(Subspecies=c(), chr_pos=c(), r=c(), p=c())
for(snp in colnames(subsp.daf.cand)){
pgls.data[[snp]]=as.numeric(as.character(pgls.data[[snp]]))
pgls.data.snp=comparative.data(phy = tree, data = pgls.data[c("Population", "forest.tree.percentage", snp)],
names.col = Population, vcv = TRUE, na.omit = TRUE, warn.dropped = TRUE)
# tryCatch means if an error occurs due to PGLS not converging it doesnt break the code, instead it just adds NA's
tryCatch({
full.pgls=NULL
full.pgls=pgls(as.formula(paste0(snp, "~forest.tree.percentage")), data=pgls.data.snp, lambda = "ML")
}, error = function(e) {
# Print error message and continue execution
#cat(snp, " failed to converge\n")
}, finally = {
# This block executes whether there is an error or not
if(is.null(full.pgls)){
# Add NAs if it didn't converge
pgls.res.test=rbind(pgls.res.test,
data.frame(Subspecies="C-E", chr_pos=snp,
r=NA, p=NA))
}else{
# Add results otherwise
summary=summary(full.pgls)
pgls.res.test=rbind(pgls.res.test,
data.frame(Subspecies="C-E", chr_pos=snp,
r=summary$coefficients[2,1], p=summary$coefficients[2,4]))
}})
}
tmp=pgls.res.test[pgls.res.test$Subspecies=="C-E", 'p']
cat(sum(is.na(tmp)), " SNPs (",100*sum(is.na(tmp))/length(tmp),"%) failed to converge\n\n")
tmp=tmp[!is.na(tmp)]
thresh_5pct=max(head(tmp[order(tmp)], round(0.05*length(tmp))))
binwidth=0.02
ggplot(pgls.res.test, aes_string(x='p'))+
theme_bw() +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5)) +
labs(title=paste0("Background p-values for All subsampled\nto only C-E populations"), y='Density') +
stat_bin(aes(y = after_stat(density)), alpha=1, binwidth=binwidth, geom="step",
position=position_nudge(x=0*binwidth)
) +
#geom_density() +
geom_vline(xintercept = thresh_5pct, color = "black", linetype = "dashed") +
xlim(0,1)
