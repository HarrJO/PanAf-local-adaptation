geom_density(data=exome_pc1.hc.c.rel[exome_pc1.hc.c.rel$Subspecies=="Nigeria-Cameroon",], aes(x=f0.PC1), col='red', fill='red',  alpha=0.3, adjust=0.5) +
geom_density(data=exome_pc1.hc.c.rel[exome_pc1.hc.c.rel$Subspecies=="Western",], aes(x=f0.PC1), col='blue', fill='blue',  alpha=0.3, adjust=0.5) +
labs(title="Unfiltered PC1 Density",x ="Unfiltered PC1", y = "Density") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_vline(xintercept = -0.01, linetype="dashed") +
geom_segment(data=exome_pc1.hc.c.rel_subsp, aes(x=f0.PC1, y=y.values, xend=f0.PC1, yend=-Inf),
colour=exome_pc1.hc.c.rel_subsp$subsp.colour, linetype="dashed", alpha=0.25) +
geom_text(data=exome_pc1.hc.c.rel_subsp, aes(x=f0.PC1, y=y.values),
label=exome_pc1.hc.c.rel_subsp$Sample, colour=exome_pc1.hc.c.rel_subsp$subsp.colour, size=3)
print(plot)
}
f0.pca.probem.samples=c("Con2-25", "LCA-3-10", "N186-8", "Kab1-5", "N262-4", "Kor1-27", "Fjn3-43", "Fouta3-55", "Gep1-62")
exome_pc1.hc.c.rel$f0.pca.probem.samples=ifelse(exome_pc1.hc.c.rel$Sample %in% f0.pca.probem.samples, exome_pc1.hc.c.rel$Sample, "")
plot.PCA("all",
exome_pc1.hc.c.rel,
paste0("../../pcangsd/exome/output/f2.0.5x.all_minInd.15_doMajorMinor.1_HWE.p.1e-3_snp.p.1e-6_minMAF.0.01/"),
label="f0.pca.probem.samples")
plot.PCA(c("c", "e","n","w"),
exome_pc1.hc.c.rel,
paste0("../../pcangsd/exome/output/f2.0.5x.subsp_minInd.15_doMajorMinor.1_HWE.p.1e-3_snp.p.1e-6_minMAF.0.01/"),
label="f0.pca.probem.samples")
# Make groups which will allow us to isolate the problematic samples and compare to subspecies/site
exome_pc1.hc.c.rel$subsp.or.f0.pca.probem.samples=ifelse(exome_pc1.hc.c.rel$Sample %in% f0.pca.probem.samples, exome_pc1.hc.c.rel$Sample, exome_pc1.hc.c.rel$Subspecies)
exome_pc1.hc.c.rel$site.or.f0.pca.probem.samples=ifelse(exome_pc1.hc.c.rel$Sample %in% f0.pca.probem.samples, exome_pc1.hc.c.rel$Sample, exome_pc1.hc.c.rel$Site)
plot.NGSadmix(meta.data=exome_pc1.hc.c.rel,
max.logs=max_logs_all,
input.prefix='../../ngsadmix/exome/output/f2.0.5x.all_minInd.15_doMajorMinor.1_HWE.p.1e-3_snp.p.1e-6_minMAF.0.01/f2.0.5x.all',
title="All Samples",
Ks=2:10,
group="subsp.or.f0.pca.probem.samples")
plot.NGSadmix(meta.data=exome_pc1.hc.c.rel[exome_pc1.hc.c.rel$Subspecies=="Central",],
max.logs=max_logs_subsp[['c']],
input.prefix='../../ngsadmix/exome/output/f2.0.5x.subsp_minInd.15_doMajorMinor.1_HWE.p.1e-3_snp.p.1e-6_minMAF.0.01/c/f2.0.5x.c',
title="Central",
Ks=2:10,
group="site.or.f0.pca.probem.samples")
exome_pc1.hc.c.rel[exome_pc1.hc.c.rel$Subspecies=="Central" & exome_pc1.hc.c.rel$Sample %in% f0.pca.probem.samples,c('Sample', 'Community')]
plot.NGSadmix(meta.data=exome_pc1.hc.c.rel[exome_pc1.hc.c.rel$Subspecies=="Eastern",],
max.logs=max_logs_subsp[['e']],
input.prefix='../../ngsadmix/exome/output/f2.0.5x.subsp_minInd.15_doMajorMinor.1_HWE.p.1e-3_snp.p.1e-6_minMAF.0.01/e/f2.0.5x.e',
title="Eastern",
Ks=2:10,
group="site.or.f0.pca.probem.samples")
exome_pc1.hc.c.rel[exome_pc1.hc.c.rel$Subspecies=="Eastern" & exome_pc1.hc.c.rel$Sample %in% f0.pca.probem.samples,c('Sample', 'Community')]
plot.NGSadmix(meta.data=exome_pc1.hc.c.rel[exome_pc1.hc.c.rel$Subspecies=="Nigeria-Cameroon",],
max.logs=max_logs_subsp[['n']],
input.prefix='../../ngsadmix/exome/output/f2.0.5x.subsp_minInd.15_doMajorMinor.1_HWE.p.1e-3_snp.p.1e-6_minMAF.0.01/n/f2.0.5x.n',
title="Nigeria-Cameroon",
Ks=2:10,
group="site.or.f0.pca.probem.samples")
exome_pc1.hc.c.rel[exome_pc1.hc.c.rel$Subspecies=="Nigeria-Cameroon" & exome_pc1.hc.c.rel$Sample %in% f0.pca.probem.samples,c('Sample', 'Community')]
plot.NGSadmix(meta.data=exome_pc1.hc.c.rel[exome_pc1.hc.c.rel$Subspecies=="Western",],
max.logs=max_logs_subsp[['w']],
input.prefix='../../ngsadmix/exome/output/f2.0.5x.subsp_minInd.15_doMajorMinor.1_HWE.p.1e-3_snp.p.1e-6_minMAF.0.01/w/f2.0.5x.w',
title="Western",
Ks=2:10,
group="site.or.f0.pca.probem.samples")
exome_pc1.hc.c.rel[exome_pc1.hc.c.rel$Subspecies=="Western" & exome_pc1.hc.c.rel$Sample %in% f0.pca.probem.samples, c('Sample', 'Community')]
# Add number of bases covered in BAM file list
number.of.bases.covered=fread(paste0(myriad.output, "coverage/mapped.on.target/number.of.bases.covered/number.of.bases.covered.per.sample"))
# Add number of bases covered in BAM file list
number.of.bases.covered=fread(paste0("../../coverage/exome/output/number.of.bases.covered/number.of.bases.covered.per.sample"))
exome_pc1.hc.c.rel=merge(exome_pc1.hc.c.rel, number.of.bases.covered, by.x="Sample", by.y="sample")
# Define poor quality samples which did not cluster correctly
no.clust=c("Fjn2-62", "Con2-57", "GB-14-05", "Gep2-41", "Fjn3-24", "Kor1-27")
# Get metadata for these samples
meta.data_no.clust=exome_pc1.hc.c.rel[exome_pc1.hc.c.rel$Sample %in% no.clust,]
# Randomly sample some y values so sample names aren't all overlapping
y.values=sample(0:600, nrow(meta.data_no.clust))
# Density plots
for(stat in c("hDNA", "Average Fragment Size", "GQN (Fragmentation Score)", "Coverage", "Human Contamination (%)", "Num Position  (Human Contamination)","SD1 (Human Contamination)", "SD2  (Human Contamination)", "number_of_bases")){
plot=ggplot(NULL) +
geom_density(data=exome_pc1.hc.c.rel, aes(x=.data[[stat]]), col='red', fill='red',  alpha=0.3, adjust=0.5) +
labs(title=paste0(stat, " Density"),x =stat, y = "Density") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_segment(data=meta.data_no.clust, aes(x=.data[[stat]], y=0, xend=.data[[stat]], yend=-Inf),
colour=meta.data_no.clust$subsp.colour, linetype="dashed", alpha=0.25) +
geom_text(data=meta.data_no.clust, aes(x=.data[[stat]], y=0),
label=meta.data_no.clust$Sample, colour=meta.data_no.clust$subsp.colour, size=5)
print(plot)
}
# Make column with sample names of only those which fail to cluster
exome_pc1.hc.c.rel$no.clust=ifelse(exome_pc1.hc.c.rel$Sample %in% no.clust, exome_pc1.hc.c.rel$Sample, "")
pca.plot=list()
pca.plot[[1]]=ggplot(exome_pc1.hc.c.rel, aes(x=`Human Contamination (%)`, y=Coverage, label = no.clust)) +
theme_minimal()+
geom_text(size = 3) +
geom_point(alpha=0.25, colour='red')+
theme(plot.title = element_text(hjust = 0.5)) +
labs(x="Human Contamination (%)", y="Coverage") +
ggtitle("Human Contamination vs Coverage")
pca.plot[[2]]=ggplot(exome_pc1.hc.c.rel, aes(x=`Human Contamination (%)`, y=Coverage, label = no.clust)) +
theme_minimal()+
geom_text(size = 3) +
geom_point(alpha=0.25, colour='red')+
theme(plot.title = element_text(hjust = 0.5)) +
labs(x="Human Contamination (%)", y="Coverage") +
ggtitle("Human Contamination vs Coverage: Zoomed into Low Coverage") +
geom_vline(xintercept = min(exome_pc1.hc.c.rel[exome_pc1.hc.c.rel$Sample %in% no.clust,]$`Human Contamination (%)`)) +
geom_hline(yintercept = max(exome_pc1.hc.c.rel[exome_pc1.hc.c.rel$Sample %in% no.clust,]$Coverage)) +
ylim(0,10)
for(plot in pca.plot){print(plot)}
# Select columns with stats
exome.qual.stats=exome_pc1.hc.c.rel[,c("hDNA", "Average Fragment Size", "GQN (Fragmentation Score)", "Coverage", "Human Contamination (%)", "Num Position  (Human Contamination)")]
# Perform PCA
exome.qual.stats=scale(exome.qual.stats)
rm(list=ls())
knitr::opts_knit$set(root.dir = '~/OneDrive - University College London/Projects/Ostridge_PanAf/sample_filtering/exome/')
min.cov=0.5
library(dplyr)
library(data.table)
library(ggplot2)
library(readxl)
library(plyr)
library(tidyr)
library(stringr)
library(igraph)
library(RColorBrewer)
library(grid)
library(gridExtra)
library(fields)
library(networkD3)
library(htmlwidgets)
library(ggrepel)
# Read in metadata
exome_pc1.hc.c.rel=read.csv("output/f2/f2.metadata.csv", check.names = FALSE)
## Ensure it is in the correct order
exome_pc1.hc.c.rel=exome_pc1.hc.c.rel[order(exome_pc1.hc.c.rel$Sample),]
# Read in filter table
filter.table=read.csv("output/f2/f2.filtertable.csv", check.names = FALSE)
plot.PCA=function(subsps, meta.data, input.dir, output.file=NULL, label=NULL, return.df=FALSE){
# Create list to store result data frames in
results=list()
# BAM file lists are always given in alphabetical order (with respect to sample name) so it is important to ensure the samples are in this order
meta.data=meta.data[order(meta.data$Sample),]
# Add label column, if no column is provided a blank label column is used
meta.data$label=''
if(!is.null(label)){meta.data$label=meta.data[[label]]}
# Loop over each subspecies provided
for(subsp in subsps){
title=""
meta.data.subsp=meta.data
# Subspecies options
if(subsp=="c"){title="Central"}
if(subsp=="e"){title="Eastern"}
if(subsp=="n"){title="Nigeria-Cameroon"}
if(subsp=="w"){title="Western"}
if(subsp=="all"){title="All Samples"
# Group defines how to draw polygons
group="Subspecies"
input=paste0(input.dir,"f2.0.5x.", subsp,".cov")}
if(subsp != "all"){
# Group defines how to draw polygons
group="Community"
input=paste0(input.dir, subsp,"/f2.0.5x.", subsp,".cov")
if(title!=""){meta.data.subsp=meta.data[meta.data$Subspecies==title,]}}
# Read in PCAngsd output
cov=read.table(input)
pcs=eigen(cov)
# Select columns corresponding to PC1 and PC2
pc1.pc2=as.data.frame(pcs$vectors[,1:2])
colnames(pc1.pc2)=c("f2.PC1", "f2.PC2")
# Add PC1 and PC2 columns to metadata
## The order of samples in PCAngsd output should be alphabetical as the BAM file lists were written in this order
pc1.pc2=cbind(meta.data.subsp, pc1.pc2)
# Percentage variance explained by PCs
PC1.percent=pcs$values[1]/sum(pcs$values)*100
PC2.percent=pcs$values[2]/sum(pcs$values)*100
# Plot
PC1.lab=paste("PC1 (", round(PC1.percent,digits = 2),"%)")
PC2.lab=paste("PC2 (", round(PC2.percent,digits = 2),"%)")
find_hull=function(pc1.pc2) pc1.pc2[chull(pc1.pc2[,'f2.PC1'], pc1.pc2[,'f2.PC2']), ]
hulls=ddply(pc1.pc2, group, find_hull)
# Plot all samples
if(subsp=="all"){
plot=ggplot(pc1.pc2, aes(x=f2.PC1, y=f2.PC2, fill=Subspecies, colour=Subspecies, label = label)) +
theme_minimal()+
geom_point(aes(shape=Subspecies), size = 1) +
geom_text_repel(size = 3, min.segment.length = unit(0.1, "lines"), show.legend = FALSE) +
geom_polygon(data = hulls, alpha = 0.5) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.key.size = unit(0.4, "cm"), plot.title = element_text(hjust = 0.5)) +
guides(fill=guide_legend(ncol=1)) +
labs(x=paste(PC1.lab), y=paste(PC2.lab)) +
ggtitle(title) +
scale_fill_manual(values = c('green3', 'darkorange', 'red', 'blue')) +
scale_color_manual(values = c('green3', 'darkorange', 'red', 'blue')) +
scale_shape_manual(values=0:4)
}
# Plot individual subspecies
else{
plot=ggplot(pc1.pc2, aes(x=f2.PC1, y=f2.PC2, fill=Site, colour=Site, label = label)) +
theme_minimal()+
geom_point(aes(shape=Site), size = 1) +
geom_text_repel(size = 3, min.segment.length = unit(0.1, "lines"), show.legend = FALSE) +
geom_polygon(data = hulls, alpha = 0.5) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.key.size = unit(0.4, "cm"), plot.title = element_text(hjust = 0.5)) +
guides(fill=guide_legend(ncol=1), shape=guide_legend(ncol=1)) +
labs(x=paste(PC1.lab), y=paste(PC2.lab)) +
ggtitle(title) +
scale_shape_manual(values=rep(0:6, 10))
}
# If an output file is provided, write to it
if(!is.null(output.file)){ggsave(paste0(output.file), plot=plot)}
# Display plot
print(plot)
# Save metadata with PC1 and PC2 columns added for the subspecies in results list
results[[subsp]]=pc1.pc2
}
# If return.df is set to TRUE, return the results list
if(return.df==T){return(results)}
}
exome_pc1.hc.c.rel_pcs=plot.PCA("all",
exome_pc1.hc.c.rel,
paste0("../../pcangsd/exome/output/f2.0.5x.all_minInd.15_doMajorMinor.1_HWE.p.1e-3_snp.p.1e-6_minMAF.0.01/"),
return.df=T,
label = "Sample")
pc1.vs.stats=function(subsp, colour=black){
data.subsp=exome_pc1.hc.c.rel_pcs[['all']][exome_pc1.hc.c.rel_pcs[['all']]$Subspecies==subsp,]
cov=ggplot(data.subsp, aes(x=f2.PC1, y=Coverage, label = Sample)) +
theme_minimal()+
geom_text(size = 3, colour=colour) +
theme(plot.title = element_text(hjust = 0.5)) +
labs(x="PC1", y="Coverage") +
ggtitle(paste0(subsp, ": PC1 vs Coverage"))
hc=ggplot(data.subsp, aes(x=f2.PC1, y=`Human Contamination (%)`, label = Sample)) +
theme_minimal()+
geom_text(size = 3, colour=colour) +
theme(plot.title = element_text(hjust = 0.5)) +
labs(x="PC1", y="Human Contamination (%)") +
ggtitle(paste0(subsp, ": PC1 vs Human Contamination"))
print(cov)
print(hc)
}
# plot in for loop so is displayed correctly in knitted markdown
subsps=list("Central", "Eastern", "Nigeria-Cameroon", "Western")
subsps.col=list("green3", "darkorange", "red", "blue")
for(i in 1:4){pc1.vs.stats(subsps[i], subsps.col[i])}
# Make a vector of problem samples
f2.pca.probem.samples=c("GB-14-05", "Con2-57", "Fjn2-62")
# Make a column containing only the sample names of problem samples so they can be plotted
exome_pc1.hc.c.rel$f2.pca.probem.samples=ifelse(exome_pc1.hc.c.rel$Sample %in% f2.pca.probem.samples, exome_pc1.hc.c.rel$Sample, "")
exome_pc1.hc.c.rel_pcs.subsp=plot.PCA(c("c", "w"),
exome_pc1.hc.c.rel,
paste0("../../pcangsd/exome/output/f2.0.5x.subsp_minInd.15_doMajorMinor.1_HWE.p.1e-3_snp.p.1e-6_minMAF.0.01/"),
label="f2.pca.probem.samples",
return.df=T)
# Add new problem samples
## NB: there isn't necessarily an issue with all these samples but their PCA results warrant further investigation to make sure.
f2.pca.probem.samples=c(f2.pca.probem.samples, "CMNP1-24", "Gco4-2", "Fjn3-24", "Gep2-41")
# Make column where the only Samples with names are the problem samples
exome_pc1.hc.c.rel$f2.pca.probem.samples=ifelse(exome_pc1.hc.c.rel$Sample %in% f2.pca.probem.samples, exome_pc1.hc.c.rel$Sample, "")
# Plot Additional concerning samples
exome_pc1.hc.c.rel_pcs.subsp=plot.PCA(c("c", "e", "n", "w"),
exome_pc1.hc.c.rel,
paste0("../../pcangsd/exome/output/f2.0.5x.subsp_minInd.15_doMajorMinor.1_HWE.p.1e-3_snp.p.1e-6_minMAF.0.01/"),
label="f2.pca.probem.samples",
return.df=T,
output.file="output/f3/pca.problem.samples.pdf")
plot.PCA("all",
exome_pc1.hc.c.rel,
paste0("../../pcangsd/exome/output/f2.0.5x.all_minInd.15_doMajorMinor.1_HWE.p.1e-3_snp.p.1e-6_minMAF.0.01/"),
label="f2.pca.probem.samples")
plot.PCA(c("c","w"),
exome_pc1.hc.c.rel,
paste0("../../pcangsd/exome/output/f2.0.5x.subsp_minInd.15_doMajorMinor.1_HWE.p.1e-3_snp.p.1e-6_minMAF.0.01/"),
label="f2.pca.probem.samples")
# Plot Additional concerning samples
plot.PCA(c("c", "e", "n", "w"),
exome_pc1.hc.c.rel,
paste0("../../pcangsd/exome/output/f2.0.5x.subsp.from.all_minInd.15_doMajorMinor.1_HWE.p.1e-3_snp.p.1e-6_minMAF.0.01/"),
label="f2.pca.probem.samples")
"../../ngsadmix/exome/output/f2.0.5x.all_minInd.15_doMajorMinor.1_HWE.p.1e-3_snp.p.1e-6_minMAF.0.01/f2."
# Read table with log liklihoods of each run into R
k_logs_all=fread('output/f2/ngsadmix/f2.0.5x.all_minInd.15_doMajorMinor.1_HWE.p.1e-3_snp.p.1e-6_minMAF.0.01/k_logs_all.txt')
# Select run with maximum likelihood per K
max_logs_all=k_logs_all %>% group_by(k) %>% slice(which.max(log))
# Prepare list to store results in
max_logs_subsp=list()
# For each subspecies...
for(subsp in c('c', 'e', 'n', 'w')){
# Read table with log likelihoods of each run into R
k_logs=fread(paste0('output/f2/ngsadmix/f2.0.5x.subsp_minInd.15_doMajorMinor.1_HWE.p.1e-3_snp.p.1e-6_minMAF.0.01/', subsp,"/", subsp, "_k_logs.txt"))
# Select run with maximum likelihood per K
max_logs_subsp[[subsp]]=k_logs %>% group_by(k) %>% slice(which.max(log))
}
# Plotting function
plot.NGSadmix=function(meta.data, max.logs, input.prefix, output.prefix=NULL, title=NULL, Ks=2:10, group="Site"){
# This function plots the results from NGSadmix as stacked bar charts.
# Ensure samples are in the correct order (this is the order of the BAM file list input for ANGSD and therefore the order of input for NGAadmix)
meta.data=meta.data[order(meta.data$Sample),]
# Loop over K values
plots=list()
for(K in Ks){
# Select run with highest likelihood for this values of K
run=paste0(max.logs[max.logs$k==K, 'run'])
# Read in data for the run with the highest likelihood
q=read.table(paste0(input.prefix, "_K", K, "_run", run, ".qopt"))
# I standardise the column names to 'group' rather than 'Site' or 'Subspecies' etc. so it is general
meta.data$Group=meta.data[,group]
# cbind samples and group to NGSadmix results
meta.data.q=cbind(meta.data, q)
# Change to long format
df=meta.data.q %>% pivot_longer(colnames(meta.data.q)[(1+ncol(meta.data.q)-K):ncol(meta.data.q)], names_to = "key", values_to = "value")
# Ordering individuals
## Make empty df so each population can be dealt with separately and rbinded together at the end
df.all=data.frame()
max.keys=data.frame()
## For each population, ensure that samples are ordered according to proportion of ancestry from the major ancestral population for the modern
for(pop in unlist(unique(df$Group))){
# Select rows corresponding to each population
df.pop=df[df$Group==pop, ]
# Sum the proportions of each ancestral population
value.per.key=tapply(df.pop$value, df.pop$key, FUN=sum)
# Select the ancestral population that has contributed the most to the modern population
max.key=rownames(data.frame(which.max(value.per.key)))
# Calculate the proportion of ancestry this ancestral population contributed to modern population
max.key.prop=value.per.key[which.max(value.per.key)]/length(unique(df.pop$Sample))
max.keys=rbind(max.keys, cbind(pop, max.key, max.key.prop))
# Select rows corresponding to this ancestral population and order by proportion
df.pop.max.key=df.pop[df.pop$key==max.key, ]
df.pop.max.key=df.pop.max.key[order(df.pop.max.key$value),]
# Important to have leading 0s on the numbers or the ordering doesn't work
sample.order=data.frame(cbind(df.pop.max.key$Sample, paste0(sprintf('%0.3d', 1:length(df.pop.max.key$Sample)), pop)))
colnames(sample.order)=c("Sample", "order")
df.pop=merge(df.pop, sample.order, by="Sample", all.x=T)
df.all=rbind(df.all, df.pop)
}
# Ordering populations
df.all=merge(df.all, max.keys, by.x="Group", by.y="pop")
# Order by the main ancestral population then order populations by the proportion of ancestry contribution
max.keys=max.keys[order(max.keys$max.key, max.keys$max.key.prop),]
# Make group type factor so ggplot follows the ordering
df.all$Group=factor(df.all$Group,levels=unique(max.keys$pop))
# Plot
Plot=ggplot(df.all, aes(as.factor(order), value, fill=key)) +
geom_col(position = "fill", width = 1) +
facet_grid(.~Group, space="free", scales="free_x") +
theme_minimal() +
scale_y_continuous(expand = c(0, 0)) +
scale_fill_manual(values = colorRampPalette(brewer.pal(K, "Set1"))(K)) +
labs(title=paste0(title, " K=", K), x="", y="") +
scale_x_discrete(expand = c(0,0)) +
theme(plot.title = element_text(hjust = 0.5), legend.position="none", axis.text.x = element_blank(),
strip.text.x = element_text(angle=90, hjust=0), panel.background = element_rect(fill = NA, color=NA))
## In order to prevent the titles being cropped, I turn the plot into a Grob
### I saved the grobs for each K in a list
plots[[K]] <- ggplotGrob(Plot)
### Select each element beginning with "strip-t" (indicating parameters related to titles at the top (hence "-t"))
for(i in which(grepl("strip-t", plots[[K]]$layout$name))){plots[[K]]$grobs[[i]]$layout$clip <- "off"}
# Save as pdf id the option is selected
if(!is.null(output.prefix)){ggsave(paste0(output.prefix, "_K", K, ".pdf"), plot=plots[[K]])}
# Display plot
grid.arrange(plots[[K]])
}
}
# Make groups which will allow us to isolate the problematic samples and compare to subspecies/site
exome_pc1.hc.c.rel$subsp.or.f2.pca.probem.samples=ifelse(exome_pc1.hc.c.rel$Sample %in% f2.pca.probem.samples, exome_pc1.hc.c.rel$Sample, exome_pc1.hc.c.rel$Subspecies)
exome_pc1.hc.c.rel$site.or.f2.pca.probem.samples=ifelse(exome_pc1.hc.c.rel$Sample %in% f2.pca.probem.samples, exome_pc1.hc.c.rel$Sample, exome_pc1.hc.c.rel$Site)
plot.NGSadmix(meta.data=exome_pc1.hc.c.rel,
max.logs=max_logs_all,
input.prefix='../../ngsadmix/exome/output/f2.0.5x.all_minInd.15_doMajorMinor.1_HWE.p.1e-3_snp.p.1e-6_minMAF.0.01/f2.0.5x.all',
title="All Samples",
Ks=2:10,
group="subsp.or.f2.pca.probem.samples")
plot.NGSadmix(meta.data=exome_pc1.hc.c.rel[exome_pc1.hc.c.rel$Subspecies=="Central",],
max.logs=max_logs_subsp[['c']],
input.prefix='../../ngsadmix/exome/output/f2.0.5x.subsp_minInd.15_doMajorMinor.1_HWE.p.1e-3_snp.p.1e-6_minMAF.0.01/c/f2.0.5x.c',
title="All Samples",
Ks=2:10,
group="site.or.f2.pca.probem.samples")
plot.NGSadmix(meta.data=exome_pc1.hc.c.rel[exome_pc1.hc.c.rel$Subspecies=="Western",],
max.logs=max_logs_subsp[['w']],
input.prefix='../../ngsadmix/exome/output/f2.0.5x.subsp_minInd.15_doMajorMinor.1_HWE.p.1e-3_snp.p.1e-6_minMAF.0.01/w/f2.0.5x.w',
title="All Samples",
Ks=2:10,
group="site.or.f2.pca.probem.samples")
# Define poor quality samples which did not cluster correctly
no.clust=c("Fjn2-62", "Con2-57", "GB-14-05", "Gep2-41", "Fjn3-24")
# Add colour column so they are coloured by subspecies
exome_pc1.hc.c.rel$subsp.colour[exome_pc1.hc.c.rel$Subspecies == "Central"] = 'green3'
exome_pc1.hc.c.rel$subsp.colour[exome_pc1.hc.c.rel$Subspecies == "Eastern"] = 'darkorange'
exome_pc1.hc.c.rel$subsp.colour[exome_pc1.hc.c.rel$Subspecies == "Nigeria-Cameroon"] = 'red'
exome_pc1.hc.c.rel$subsp.colour[exome_pc1.hc.c.rel$Subspecies == "Western"] = 'blue'
# Get metadata for these samples
meta.data_no.clust=exome_pc1.hc.c.rel[exome_pc1.hc.c.rel$Sample %in% no.clust,]
# Randomly sample some y values so sample names aren't all overlapping
y.values=sample(0:600, nrow(meta.data_no.clust))
# Density plots
ggplot(NULL) +
geom_density(data=exome_pc1.hc.c.rel, aes(x=f0.PC1), col='black', fill='black',  alpha=0.3, adjust=0.5) +
geom_density(data=exome_pc1.hc.c.rel[exome_pc1.hc.c.rel$Subspecies=="Central",], aes(x=f0.PC1), col='green3', fill='green3',  alpha=0.3, adjust=0.5) +
geom_density(data=exome_pc1.hc.c.rel[exome_pc1.hc.c.rel$Subspecies=="Eastern",], aes(x=f0.PC1), col='darkorange', fill='darkorange',  alpha=0.3, adjust=0.5) +
geom_density(data=exome_pc1.hc.c.rel[exome_pc1.hc.c.rel$Subspecies=="Nigeria-Cameroon",], aes(x=f0.PC1), col='red', fill='red',  alpha=0.3, adjust=0.5) +
geom_density(data=exome_pc1.hc.c.rel[exome_pc1.hc.c.rel$Subspecies=="Western",], aes(x=f0.PC1), col='blue', fill='blue',  alpha=0.3, adjust=0.5) +
labs(title="PC1 Density: from PCA on All Samples Unfiltered",x ="PC1", y = "Density") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_vline(xintercept = -0.01, linetype="dashed") +
geom_segment(data=meta.data_no.clust, aes(x=f0.PC1, y=y.values, xend=f0.PC1, yend=-Inf),
colour=meta.data_no.clust$subsp.colour, linetype="dashed", alpha=0.25) +
geom_text(data=meta.data_no.clust, aes(x=f0.PC1, y=y.values),
label=meta.data_no.clust$Sample, colour=meta.data_no.clust$subsp.colour, size=2)
for(subsp in c("Central","Eastern","Nigeria-Cameroon","Western")){
exome_pc1.hc.c.rel_subsp=exome_pc1.hc.c.rel[exome_pc1.hc.c.rel$Subspecies==subsp,]
y.values=sample(0:600, nrow(exome_pc1.hc.c.rel_subsp))
plot=ggplot(NULL) +
geom_density(data=exome_pc1.hc.c.rel, aes(x=f0.PC1), col='black', fill='black',  alpha=0.3, adjust=0.5) +
geom_density(data=exome_pc1.hc.c.rel[exome_pc1.hc.c.rel$Subspecies=="Central",], aes(x=f0.PC1), col='green3', fill='green3',  alpha=0.3, adjust=0.5) +
geom_density(data=exome_pc1.hc.c.rel[exome_pc1.hc.c.rel$Subspecies=="Eastern",], aes(x=f0.PC1), col='darkorange', fill='darkorange',  alpha=0.3, adjust=0.5) +
geom_density(data=exome_pc1.hc.c.rel[exome_pc1.hc.c.rel$Subspecies=="Nigeria-Cameroon",], aes(x=f0.PC1), col='red', fill='red',  alpha=0.3, adjust=0.5) +
geom_density(data=exome_pc1.hc.c.rel[exome_pc1.hc.c.rel$Subspecies=="Western",], aes(x=f0.PC1), col='blue', fill='blue',  alpha=0.3, adjust=0.5) +
labs(title="Unfiltered PC1 Density",x ="Unfiltered PC1", y = "Density") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_vline(xintercept = -0.01, linetype="dashed") +
geom_segment(data=exome_pc1.hc.c.rel_subsp, aes(x=f0.PC1, y=y.values, xend=f0.PC1, yend=-Inf),
colour=exome_pc1.hc.c.rel_subsp$subsp.colour, linetype="dashed", alpha=0.25) +
geom_text(data=exome_pc1.hc.c.rel_subsp, aes(x=f0.PC1, y=y.values),
label=exome_pc1.hc.c.rel_subsp$Sample, colour=exome_pc1.hc.c.rel_subsp$subsp.colour, size=3)
print(plot)
}
f0.pca.probem.samples=c("Con2-25", "LCA-3-10", "N186-8", "Kab1-5", "N262-4", "Kor1-27", "Fjn3-43", "Fouta3-55", "Gep1-62")
exome_pc1.hc.c.rel$f0.pca.probem.samples=ifelse(exome_pc1.hc.c.rel$Sample %in% f0.pca.probem.samples, exome_pc1.hc.c.rel$Sample, "")
plot.PCA("all",
exome_pc1.hc.c.rel,
paste0("../../pcangsd/exome/output/f2.0.5x.all_minInd.15_doMajorMinor.1_HWE.p.1e-3_snp.p.1e-6_minMAF.0.01/"),
label="f0.pca.probem.samples")
plot.PCA(c("c", "e","n","w"),
exome_pc1.hc.c.rel,
paste0("../../pcangsd/exome/output/f2.0.5x.subsp_minInd.15_doMajorMinor.1_HWE.p.1e-3_snp.p.1e-6_minMAF.0.01/"),
label="f0.pca.probem.samples")
# Make groups which will allow us to isolate the problematic samples and compare to subspecies/site
exome_pc1.hc.c.rel$subsp.or.f0.pca.probem.samples=ifelse(exome_pc1.hc.c.rel$Sample %in% f0.pca.probem.samples, exome_pc1.hc.c.rel$Sample, exome_pc1.hc.c.rel$Subspecies)
exome_pc1.hc.c.rel$site.or.f0.pca.probem.samples=ifelse(exome_pc1.hc.c.rel$Sample %in% f0.pca.probem.samples, exome_pc1.hc.c.rel$Sample, exome_pc1.hc.c.rel$Site)
plot.NGSadmix(meta.data=exome_pc1.hc.c.rel,
max.logs=max_logs_all,
input.prefix='../../ngsadmix/exome/output/f2.0.5x.all_minInd.15_doMajorMinor.1_HWE.p.1e-3_snp.p.1e-6_minMAF.0.01/f2.0.5x.all',
title="All Samples",
Ks=2:10,
group="subsp.or.f0.pca.probem.samples")
plot.NGSadmix(meta.data=exome_pc1.hc.c.rel[exome_pc1.hc.c.rel$Subspecies=="Central",],
max.logs=max_logs_subsp[['c']],
input.prefix='../../ngsadmix/exome/output/f2.0.5x.subsp_minInd.15_doMajorMinor.1_HWE.p.1e-3_snp.p.1e-6_minMAF.0.01/c/f2.0.5x.c',
title="Central",
Ks=2:10,
group="site.or.f0.pca.probem.samples")
exome_pc1.hc.c.rel[exome_pc1.hc.c.rel$Subspecies=="Central" & exome_pc1.hc.c.rel$Sample %in% f0.pca.probem.samples,c('Sample', 'Community')]
plot.NGSadmix(meta.data=exome_pc1.hc.c.rel[exome_pc1.hc.c.rel$Subspecies=="Eastern",],
max.logs=max_logs_subsp[['e']],
input.prefix='../../ngsadmix/exome/output/f2.0.5x.subsp_minInd.15_doMajorMinor.1_HWE.p.1e-3_snp.p.1e-6_minMAF.0.01/e/f2.0.5x.e',
title="Eastern",
Ks=2:10,
group="site.or.f0.pca.probem.samples")
exome_pc1.hc.c.rel[exome_pc1.hc.c.rel$Subspecies=="Eastern" & exome_pc1.hc.c.rel$Sample %in% f0.pca.probem.samples,c('Sample', 'Community')]
plot.NGSadmix(meta.data=exome_pc1.hc.c.rel[exome_pc1.hc.c.rel$Subspecies=="Nigeria-Cameroon",],
max.logs=max_logs_subsp[['n']],
input.prefix='../../ngsadmix/exome/output/f2.0.5x.subsp_minInd.15_doMajorMinor.1_HWE.p.1e-3_snp.p.1e-6_minMAF.0.01/n/f2.0.5x.n',
title="Nigeria-Cameroon",
Ks=2:10,
group="site.or.f0.pca.probem.samples")
exome_pc1.hc.c.rel[exome_pc1.hc.c.rel$Subspecies=="Nigeria-Cameroon" & exome_pc1.hc.c.rel$Sample %in% f0.pca.probem.samples,c('Sample', 'Community')]
plot.NGSadmix(meta.data=exome_pc1.hc.c.rel[exome_pc1.hc.c.rel$Subspecies=="Western",],
max.logs=max_logs_subsp[['w']],
input.prefix='../../ngsadmix/exome/output/f2.0.5x.subsp_minInd.15_doMajorMinor.1_HWE.p.1e-3_snp.p.1e-6_minMAF.0.01/w/f2.0.5x.w',
title="Western",
Ks=2:10,
group="site.or.f0.pca.probem.samples")
exome_pc1.hc.c.rel[exome_pc1.hc.c.rel$Subspecies=="Western" & exome_pc1.hc.c.rel$Sample %in% f0.pca.probem.samples, c('Sample', 'Community')]
# Add number of bases covered in BAM file list
number.of.bases.covered=fread(paste0("../../coverage/exome/output/number.of.bases.covered/number.of.bases.covered.per.sample"))
exome_pc1.hc.c.rel=merge(exome_pc1.hc.c.rel, number.of.bases.covered, by.x="Sample", by.y="sample")
# Define poor quality samples which did not cluster correctly
no.clust=c("Fjn2-62", "Con2-57", "GB-14-05", "Gep2-41", "Fjn3-24", "Kor1-27")
# Get metadata for these samples
meta.data_no.clust=exome_pc1.hc.c.rel[exome_pc1.hc.c.rel$Sample %in% no.clust,]
# Randomly sample some y values so sample names aren't all overlapping
y.values=sample(0:600, nrow(meta.data_no.clust))
# Density plots
for(stat in c("hDNA", "Average Fragment Size", "GQN (Fragmentation Score)", "Coverage", "Human Contamination (%)", "Num Position  (Human Contamination)","SD1 (Human Contamination)", "SD2  (Human Contamination)", "number_of_bases")){
plot=ggplot(NULL) +
geom_density(data=exome_pc1.hc.c.rel, aes(x=.data[[stat]]), col='red', fill='red',  alpha=0.3, adjust=0.5) +
labs(title=paste0(stat, " Density"),x =stat, y = "Density") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_segment(data=meta.data_no.clust, aes(x=.data[[stat]], y=0, xend=.data[[stat]], yend=-Inf),
colour=meta.data_no.clust$subsp.colour, linetype="dashed", alpha=0.25) +
geom_text(data=meta.data_no.clust, aes(x=.data[[stat]], y=0),
label=meta.data_no.clust$Sample, colour=meta.data_no.clust$subsp.colour, size=5)
print(plot)
}
# Make column with sample names of only those which fail to cluster
exome_pc1.hc.c.rel$no.clust=ifelse(exome_pc1.hc.c.rel$Sample %in% no.clust, exome_pc1.hc.c.rel$Sample, "")
pca.plot=list()
pca.plot[[1]]=ggplot(exome_pc1.hc.c.rel, aes(x=`Human Contamination (%)`, y=Coverage, label = no.clust)) +
theme_minimal()+
geom_text(size = 3) +
geom_point(alpha=0.25, colour='red')+
theme(plot.title = element_text(hjust = 0.5)) +
labs(x="Human Contamination (%)", y="Coverage") +
ggtitle("Human Contamination vs Coverage")
pca.plot[[2]]=ggplot(exome_pc1.hc.c.rel, aes(x=`Human Contamination (%)`, y=Coverage, label = no.clust)) +
theme_minimal()+
geom_text(size = 3) +
geom_point(alpha=0.25, colour='red')+
theme(plot.title = element_text(hjust = 0.5)) +
labs(x="Human Contamination (%)", y="Coverage") +
ggtitle("Human Contamination vs Coverage: Zoomed into Low Coverage") +
geom_vline(xintercept = min(exome_pc1.hc.c.rel[exome_pc1.hc.c.rel$Sample %in% no.clust,]$`Human Contamination (%)`)) +
geom_hline(yintercept = max(exome_pc1.hc.c.rel[exome_pc1.hc.c.rel$Sample %in% no.clust,]$Coverage)) +
ylim(0,10)
for(plot in pca.plot){print(plot)}
# Select columns with stats
exome.qual.stats=exome_pc1.hc.c.rel[,c("hDNA", "Average Fragment Size", "GQN (Fragmentation Score)", "Coverage", "Human Contamination (%)", "Num Position  (Human Contamination)")]
# Perform PCA
exome.qual.stats=scale(exome.qual.stats)
